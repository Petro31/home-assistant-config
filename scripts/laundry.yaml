reset_washer:
  alias: Reset the state
  mode: single
  sequence:
  - service: script.calculate_washer_cycle
    data:
      reset: true
      source: binary_sensor.washer_status
      next_phase: "off"
      prefix: washer_dryer_

calculate_washer_cycle:
  alias: Calculate Current Cycle
  mode: parallel
  fields:
    prefix:
      description: (Required) start part of the unique_id
      example: foo
      required: True
      default: washer_dryer_
      selector:
        select:
          options:
          - washer_dryer_
    source: 
      description: (Required) Source of the state change
      example: binary_sensor.washer_status
      required: True
      default: binary_sensor.washer_status
      selector:
        entity:
          include_entities:
          - binary_sensor.washer_status
    next_phase:
      description: (Required) State of the next phase
      example: 'on'
      required: True
      default: 'off'
      selector:
        select:
          options:
          - label: "On"
            value: 'on'
          - label: "Off"
            value: 'off'
    reset:
      description: (Optional) Reset the cycle.
      example: True
      default: False
      selector:
        boolean:

  variables:

    # MQTT SETUP
    root: homeassistant
    topic_root: binary_sensor
    config: &config
      input_boolean.test_washer:
        final_spin:
          duration: 10
          window: 5
      binary_sensor.washer_status:
        object_id: washer
        final_spin:
          duration: 600
          window: 60

    # SETTING THE BINARY SENSOR STATE
    current: >
      {{ config.get(source) }}
    have_current: >
      {{ current is not none }}
    object_id: >
      {{ current.object_id if current.object_id is defined and have_current else source.split('.')[-1] }}
    entity: >
      {{ topic_root }}.{{ object_id }}
    unique_id: >
      {{ prefix }}{{ object_id }}
    phase_timestamp: >
      {{ now().isoformat() }}
    idle:
      phase: 'off'
      start: "{{ phase_timestamp }}"
      action: 'idle'
    current_cycles: >
      {{ state_attr(entity or 'dump', 'cycles') or [] }}
    current_cycle: >
      {{ (current_cycles or []) | last | default(none) }}
    current_phase: >
      {{ current_cycle.phase if current_cycle is not none else none }}
    next_cycle: >
      {% if current_cycle is not none %}
        {% if current_phase != next_phase %}
          {{ {'phase': next_phase, 'start': phase_timestamp} }}
        {% else %}
          {{ current_cycle }}
        {% endif %}
      {% else %}
        {{ {'phase': next_phase if next_phase == 'on' else 'off', 'start': phase_timestamp} }}
      {% endif %}
    cycles: >
      {% set rollup = current_cycles + [ next_cycle ] %}
      {% set ns = namespace(ret=[], attrs=[]) %}

      {# setup durations for phases #}
      {% if reset is not defined or not reset %}
        {% for i in range(rollup | length) %}
          {% set attrs = rollup[i] %}
          {% set next_attrs = rollup[i + 1] if i + 1 < rollup | length else {} %}
          {% set ns.attrs = attrs.items() | rejectattr('0','in',['duration', 'action']) | list %}
          {% set duration = (next_attrs.start | as_datetime - attrs.start | as_datetime).seconds if next_attrs else 0.0 %}
          {% set ns.attrs = ns.attrs + [('duration', duration)] %}
  
          {% if attrs.phase == 'on' %}
  
            {# on state, try to find phase #}
            {% set l, u = current.final_spin.duration - current.final_spin.window, current.final_spin.duration + current.final_spin.window %}
            {% if l <= duration <= u %}
              {% set ns.attrs = ns.attrs + [('action', "finish")] %}
            {% else %}
              {% set ns.attrs = ns.attrs + [('action', "spinning")] %} 
            {% endif %}
          {% else %}
            {# off state, do not collect phase #}
            {% set ns.attrs = ns.attrs + [('action', "idle")] %}
          {% endif %}
          {% set ns.ret = ns.ret + [dict(ns.attrs)] %}
        {% endfor %}
        {% set last = ns.ret | list | last | default(idle) %}
        {% if ns.ret | length == 1 and last.phase in ['off', 'idle'] %}
          []
        {% else %}
          {{ ns.ret if 'finish' not in ns.ret | map(attribute='action') else [] }}
        {% endif %}
      {% else %}
        []
      {% endif %}
    next_state: >
      O{{ 'N' if cycles | length > 0 else 'FF' }}

  sequence:
  - service: script.mqtt_automated_states
    data:
      <<: &mqtt
        domain: binary_sensor
      unique_id: "{{ unique_id }}"
      state: "{{ next_state }}"
      attributes: "{{ {'source': source, 'cycles': cycles} }}"
