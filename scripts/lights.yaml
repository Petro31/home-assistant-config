######################################
# Zwave Multicast Floor, Area, Label #
######################################

get_light_endpoints:
  mode: parallel
  alias: Generate a list of entpoints
  fields: &fields
    floor:
      description: (Optional) - The floor to turn on/off
      selector:
        floor:
          multiple: True
    area:
      description: (Optional) - The area to turn on/off
      selector:
        area:
          multiple: True
    include:
      description: The label to find
      required: True
      selector:
        label:
          multiple: True
    exclude:
      description: (Optional) - The label to exclude
      selector:
        label:
          multiple: True
    level:
      description: (Optional) The brightness level, switches will be on if the level is greater than 0.
      example: 99
      required: True
      selector:
        number:
          min: 0
          max: 255
  variables: &variables
    # These are set to variables then output to easily test in template editor.
    defined_floors: >
      {%- set defined_floors = [floor_id(floor)] if floor is string else floor | map('floor_id') | list if floor is defined else [] %}
      {{- defined_floors }}
    defined_areas: >
      {%- set defined_areas = [area] if area is string else area if area is defined else [] %}
      {{- defined_areas }}
    includes: >
      {%- set includes = [include] if include is string else include %}
      {{- includes }}
    excludes: >
      {%- set excludes = [exclude] if exclude is string else exclude if exclude is defined else [] %}
      {{- excludes }}
    multicast: True
    zwave_pct: >
      {#- Zwave max percentage is 99 for some reason. #}
      {%- set maximum = 99 %}
      {%- set zwave_pct = (level | int(0) / 255 * maximum) | int %}
      {%- set zwave_pct = [ 0, zwave_pct ] | max %}
      {%- set zwave_pct = [ maximum, zwave_pct] | min %}
      {{- zwave_pct }}
    brightness_pct: >
      {#- Convert 0-99 to 0-100 #}
      {%- set brightness_pct = (zwave_pct / 99 * 100) | round | int %}
      {{- brightness_pct }}
    value: >
      {#- 0 == False, anything > 0 == True #}
      {%- set value = zwave_pct > 0 %}
      {{- value }}

    # This is done for now because parallel cannot be auto generated.
    # Add a new domain, and add a new parallel call for zwave and non zwave
    # service calls.
    # These configs assume the default endpoint is zero.  This may 
    # need to change when adding new domains.
    zwave:
      light:
        command_class: 38
        property: targetValue
        value: "{{ zwave_pct }}"
      switch:
        command_class: 37
        property: targetValue
        value: "{{ value }}"
    non_zwave:
      light:
        service: light.turn_o{{ 'n' if value else 'ff' }}
        data:
          brightness_pct: "{{ brightness_pct }}"
      switch:
        service: switch.turn_o{{ 'n' if value else 'ff' }}
        data: {}
    labeled: >
      {#- Get the list of entities that are labeled #}
      {%- set items = includes | map('label_entities') | sum(start=[]) %}
      {{- items | reject('in', excludes | map('label_entities') | sum(start=[])) | list if excludes else items }}
    in_area: >
      {#- Filter to a list of entities that will be checked for on/off #}
      {%- set ns = namespace(items=[]) %}
      {%- if defined_floors %}
        {%- set ns.items = ns.items + defined_floors | map('floor_areas') | sum(start=[]) | map('area_entities') | sum(start=[]) | list %}
      {%- endif %}
      {%- if defined_areas %}
        {%- set ns.items = ns.items + defined_areas | map('area_entities') | sum(start=[]) | list %}
      {%- endif %}
      {{ ns.items | unique | select('in', labeled) | list }}
    endpoints: >
      {#- Get endpoints that are setup in the system for unique zwave multicast calls. #}
      {%- set ns = namespace(items=[('endpoint_0',[('endpoint',0)])]) %}
      {%- for name in labels() | map('label_name') | select('search', '^(\{\"endpoint\": [0-9]\})$') %}
        {%- set ns.items = ns.items + [(name | label_id, (name | from_json).items() | list)] %}
      {%- endfor %}
      {%- set endpoints = dict.from_keys(ns.items) %}
      {%- set endpoint_entities = endpoints | map('label_entities') | sum(start=[]) %}
      {%- set ns.items = [] %}
      {% for domain, items in zwave.items() %}
        {%- set attributes = items.items() | list %}
        {%- set sub = namespace(items=[], non_zwave=[]) %}
        {%- for epname, eps in endpoints.items() %}
          {%- set zwave_integration = integration_entities('zwave_js') %}
          {%- set entities = (
            zwave_integration | select('match', '^({0}).'.format(domain)) | reject('in', endpoint_entities) | list
            if epname == 'endpoint_0' else
            label_entities(epname) | select('match', '^({0}).'.format(domain)) | list
          ) -%}
          {%- set sub.non_zwave = sub.non_zwave + in_area | select('match', '^({0}).'.format(domain)) | reject('in', zwave_integration) | list %}
          {#- Filter down to entities that are selected by the areas #}
          {%- set zwave_entities = entities | select('in', in_area) | list %}
          {%- set data = dict.from_keys(attributes + eps) %}
          {%- set sub.items = sub.items + [(epname, dict(data=data, entities=zwave_entities))] %}
        {%- endfor %}
        {%- set sub.items = sub.items + [('other', dict(entities=sub.non_zwave | unique | list, **non_zwave[domain]))] %}
        {%- set ns.items = ns.items + [(domain, dict.from_keys(sub.items))] %}
      {% endfor %}
      {{ dict.from_keys(ns.items) }}
  sequence:
  - stop: Stopping
    response_variable: endpoints

light_handler:
  mode: parallel
  alias: Turn on/off lights and switches in parallel.
  fields: *fields
  variables: *variables
  sequence:
  - parallel:

    #########
    # LIGHT #
    #########

    # Endpoint 0
    - if: "{{ endpoints.light.endpoint_0.entities | count > 0 }}"
      then:
      - variables:
          info: "{{ endpoints.light.endpoint_0 }}"
      - <<: &zwave_service
          service: zwave_js.multicast_set_value
          target:
            entity_id: "{{ info.entities }}"
          data: "{{ info.data }}"

    # Endpoint 1
    - if: "{{ endpoints.light.endpoint_1.entities | count > 0 }}"
      then:
      - variables:
          info: "{{ endpoints.light.endpoint_1 }}"
      - <<: *zwave_service

    # Endpoint 2
    - if: "{{ endpoints.light.endpoint_2.entities | count > 0 }}"
      then:
      - variables:
          info: "{{ endpoints.light.endpoint_2 }}"
      - <<: *zwave_service

    # Everything else
    - if: "{{ endpoints.light.other.entities | count > 0 }}"
      then:
      - service: "{{ endpoints.light.other.service }}"
        target:
          entity_id: "{{ endpoints.light.other.entities }}"
        data: "{{ endpoints.light.other.data }}"

    ##########
    # SWITCH #
    ##########

    # Endpoint 0
    - if: "{{ endpoints.switch.endpoint_0.entities | count > 0 }}"
      then:
      - variables:
          info: "{{ endpoints.switch.endpoint_0 }}"
      - <<: *zwave_service

    # Endpoint 1
    - if: "{{ endpoints.switch.endpoint_1.entities | count > 0 }}"
      then:
      - variables:
          info: "{{ endpoints.switch.endpoint_1 }}"
      - <<: *zwave_service

    # Endpoint 2
    - if: "{{ endpoints.switch.endpoint_2.entities | count > 0 }}"
      then:
      - variables:
          info: "{{ endpoints.switch.endpoint_2 }}"
      - <<: *zwave_service

    # Everything else
    - if: "{{ endpoints.switch.other.entities | count > 0 }}"
      then:
      - service: "{{ endpoints.switch.other.service }}"
        target:
          entity_id: "{{ endpoints.switch.other.entities }}"
