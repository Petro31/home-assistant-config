#########################
# Zwave Multicast Group #
#########################

zwave_multicast_group:
  mode: parallel
  alias: Multicast to Zwave Switch/Light Group
  fields:
    group:
      description: (Required) The group of lights & switches
      example: group.bonus_room_area
      selector:
        entity:
          domain: group
    level:
      description: (Optional) The brightness level, switches will be on if the level is greater than 0.
      example: 99
      selector:
        number:
          min: 0
          max: 255
  variables:
    brightness_pct: >
      {%- set brightness_pct = (level | int(0) / 255 * 100) | int %}
      {%- set brightness_pct = [ 0, brightness_pct ] | max %}
      {%- set brightness_pct = [ 99, brightness_pct] | min %}
      {{- brightness_pct }}
    value: >
      {%- set value = brightness_pct > 0 %}
      {{- value }}
    settings:
      light:
        command_class: 38
        property: targetValue
        endpoint: 0
        value: "{{ brightness_pct }}"
      switch:
        command_class: 37
        property: targetValue
        endpoint: 0
        value: "{{ value }}"
      switch.flood_light:
        endpoint: 1
      switch.sliding_door_sconce:
        endpoint: 2
      switch.double_plug_left:
        endpoint: 1
      switch.floating_double_plug_left:
        endpoint: 1
      switch.floating_double_plug_right:
        endpoint: 2
    zwave_entities: >
      {{ expand(group) | map(attribute='entity_id') | select('in', integration_entities('zwave_js')) | list }}
    lights: >
      {% if value %}
        {% set off_lights = expand(zwave_entities) 
          | selectattr('domain', 'eq', 'light')
          | selectattr('state', 'eq', 'off')
          | map(attribute='entity_id') | list %}
        {% set on_lights = expand(zwave_entities) 
          | selectattr('domain', 'eq', 'light')
          | selectattr('state', 'eq', 'on')
          | selectattr('attributes.brightness', 'defined') 
          | rejectattr('attributes.brightness','eq', level)
          | map(attribute='entity_id') | list %}
        {{ (off_lights + on_lights) or none }}
      {% else %}
        {{ expand(zwave_entities) 
          | selectattr('domain', 'eq', 'light')
          | selectattr('state', 'eq', 'on')
          | map(attribute='entity_id') | list or none }}
      {% endif %}
    switches: >
      {%- set switches = expand(zwave_entities) | selectattr('domain', 'eq', 'switch') %}
      {%- set switches = switches | selectattr('state','eq', 'off' if value else 'on') %}
      {%- set switches = switches | map(attribute='entity_id') | list %}
      {{- switches or none }}
    items: >
      {%- set ns = namespace(items={}, spool={}) %}
      {%- set fmat = "('{0}': {1})" %}
      {%- set items = (switches or []) + (lights or []) %}
      {%- for item in items %}
        {%- set state_obj = expand(item) | first | default(none) %}
        {%- if state_obj and state_obj.domain in ['light','switch'] %}
          {%- set domain = state_obj.domain %}
          {%- set entity_id = state_obj.entity_id %}
          {%- set entity_ids = lights if domain == 'light' else switches %}
          {%- set current = settings[domain] %}
          {%- set current = dict(current, **settings[entity_id]) if entity_id in settings else current %}
          {%- set key = domain ~ '_' ~ current.items() | list | string | lower | regex_findall('[a-z0-9_]+') | join('_') %}
          {%- if key in ns.spool %}
            {%- set ns.spool = dict(ns.spool, **{key:ns.spool[key] + [entity_id]}) %}
          {%- else %}
            {%- set ns.spool = dict(ns.spool, **{key:[entity_id]}) %}
          {%- endif %}
          {%- set entity_ids = ns.spool[key] %}
          {%- set current = dict(domain=domain, **current) %}
          {%- set current = dict(current, entity_id=entity_ids) %}
          {%- set ns.items = dict(ns.items, **{key:current | string}) %}
        {%- endif %}
      {%- endfor %}
      [{{ ns.items.values() | unique | sort | list | join(', ') }}]
    execute: >
      {{ items is not none and items != [] }}
    total: >
      {{ items | length if execute else 0 }}
  sequence:
  - condition: template
    value_template: "{{ execute }}"
  - repeat:
      count: "{{ total }}"
      sequence:
      - service: zwave_js.multicast_set_value
        target:
          entity_id: "{{ items[repeat.index - 1].entity_id }}"
        data:
          command_class: "{{ items[repeat.index - 1].command_class }}"
          property: "{{ items[repeat.index - 1].property }}"
          endpoint: "{{ items[repeat.index - 1].endpoint }}"
          value: "{{ items[repeat.index - 1].value }}"
