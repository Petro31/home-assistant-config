zwavejs2mqtt_mqtt_set_config_parameter:
  alias: Set Config Parameter to ZwaveJS2MQTT via MQTT
  description: Publishes to ZwaveJS2MQTT
  fields:
    node_id:
      description: Zwave Node Id
      example: 3
    parameter:
      description: Parameter to be set.
      example: 4
    value:
      description: Value to be set for the parameter
      example: 256
    bytes:
      description: Size of parameter (1, 2, or 4)
      example: 4
  variables:
    payload:
      args:
      - nodeId: "{{ node_id }}"
        commandClass: 112
        property: "{{ parameter }}"
      - set
      - "{{ [ parameter, value, bytes ] }}"
  sequence:
  - service: mqtt.publish
    data:
      topic: zwave/_CLIENTS/ZWAVE_GATEWAY-Mosquitto/api/sendCommand/set
      payload: "{{ payload | tojson }}"

############################
# LZW45 Quick Strip Effect #
############################

# The main script for turning setting the quick strip effects

lzw45_quick_strip_effect:
  alias: LZW45 Quick Strip Effect
  description: Sets quick strip effects for the Inovelli LZW45 LED Strip
  mode: restart
  fields:
    lzw45: 
      description: (exclusive) The entity_id for the lzw45 LED Strip.
      example: light.lzw45_light_strip_level
    effect:
      description: (required) The desired effect - 'off', 'solid', 'chase', 'fast-blink', 'slow-blink', 'fast-fade', 'slow-fade'
      example: slow-fade
    color:
      description: (optional) hue or color_temp
      example: hue
    hue:
      description: (exclusive) The Hue.  Valid ranges are 0 to 360.  You cannot combine this with color_temp.
      example: 360
    color_temp:
      description: (exclusive) The color temperature (2700 - 6500).  You cannot combine this with hue.
      example: 2700
    brightness_pct:
      description: (optional) The brightness percent, 0 - 100.  Defaults to 100 if omitted.
      example: 10
    seconds:
      description: (optional) Duration of the effect in seconds (0 - 60 seconds).  Cannot be combined with 'minutes' or 'hours'.
      example: 1
    minutes:
      description: (optional) Duration of the effect in minutes (0 - 60 minutes).  Cannot be combined with 'seconds' or 'hours'.
      example: 1
    hours:
      description: (optional) Duration of the effect in hours (0 - 60 hours).  Cannot be combined with 'seconds' or 'minutes'.
      example: 1
    endless:
      description: (optional) Set to true if you want the effect to stay 'forever'.
      example: true
  variables:
    color_type: >
      {{ 64 if color == 'color_temp' else 0 }}
    byte1: >
      {%- if color_type == 0 %}
        {%- set hue = hue | default(360) | int %}
        {%- set hue = hue if hue >= 0 else 0 %}
        {%- set hue = hue if hue <= 360 else 360 %}
        {{ (hue / 360 * 255) | int }}
      {%- else %}
        {%- set color_temp = color_temp | default(2700) | int %}
        {%- set color_temp = color_temp if color_temp >= 2700 else 2700 %}
        {%- set color_temp = color_temp if color_temp <= 6500 else 6500 %}
        {{ ((color_temp - 2700) / (6500 - 2700) * 255) | int }}
      {%- endif %}
    byte2: >
      {%- set pct = brightness_pct | default(100) | int %}
      {%- if 0 <= pct <= 100 %}
        {%- if pct == 100 %}
          10
        {%- else %}
          {{ 128 + pct }}
        {%- endif %}
      {%- else %}
        0
      {%- endif %}
    byte3: >
      {%- set seconds = seconds | default(0) | int %}
      {%- set minutes = minutes | default(0) | int %}
      {%- set hours = hours | default(0) | int %}
      {%- set forever = endless | default(false) %}
      {%- if forever %}
        255
      {%- elif 0 < seconds <= 60 %}
        {{ seconds }}
      {%- elif 0 < minutes <= 60 %}
        {{ minutes + 60 }}
      {%- elif 0 < hours <= 60 %}
        {{ hours + 120 }}
      {%- else %}
        0
      {%- endif %}
    byte4: >
      {%- set effect = effect | default('static') | lower | replace(' ', '-') %}
      {%- set effects = { 'off': 0, 'solid': 1, 'chase': 2, 'fast-blink': 3, 'slow-blink': 4, 'fast-fade': 5, 'slow-fade': 6 } %}
      {%- set value = 0 %}
      {%- set value = value + effects.get(effect, 0) %}
      {{ value + color_type }}
    bytes: >
      {{ byte4 * 2**24 + byte3 * 2**16 + byte2 * 2**8 + byte1 }}
  sequence:
  - condition: template
    value_template: "{{ lzw45 is defined }}"

  - service: zwave_js.bulk_set_partial_config_parameters
    target:
      entity_id: "{{ lzw45 }}"
    data:
      parameter: 21
      value: "{{ bytes }}"

# Whenever the UI is adjusted, fire this script to merry all UI
# settings together and fire the script.

lzw45_ui_quick_effect:
  alias: LZW45 Update from UI Quick Strip Effect
  sequence:
  - service: script.lzw45_quick_strip_effect
    data:
      lzw45: &lzw45s
      - light.light_strip
      - light.light_strip_2
      endless: true
      color: "{{ 'color_temp' if is_state('input_boolean.hue_color_temp', 'on') else 'hue' }}"
      effect: "{{ states('input_select.quick_strip_effect') | default('slow-fade') }}"
      brightness_pct: "{{ states('input_number.quick_strip_brightness') | int(default=99) }}"
      hue: "{{ states('input_number.quick_strip_hue') | int(default=360) }}"
      color_temp: "{{ states('input_number.quick_strip_color_temp') | int(default=2700) }}"

# This is for switches to keep the UI in sync with
# the switch that is active.

lzw45_change_ui_quick_effect:
  alias: LZW45 Change UI Quick Strip Effect
  fields:
    brightness_pct:
      description: (Optional) brightness
      example: 99
    hue:
      description: (Optional) The hue
      example: 110
    temp:
      description: (Optional) The color temp
      example: 2700
    effect:
      description: (Optional) The type
      example: solid
  variables:
    brightness: >
      {{ brightness_pct | default(99) }}
    option: >
      {{ effect | default('solid') }}
    use_color: >
      {{ hue | default(none) is not none }}
    color_temp: >
      {{ temp | default(2700) }}
    color: >
      {{ hue | default(185) }}
  sequence:
  - service: input_boolean.turn_{{ 'on' if use_color else 'off' }}
    target:
      entity_id: input_boolean.hue_color_temp

  - service: input_number.set_value
    target:
      entity_id: input_number.quick_strip_brightness
    data:
      value: "{{ brightness_pct }}"

  - service: input_number.set_value
    target:
      entity_id: input_number.quick_strip_color_temp
    data:
      value: "{{ temp }}"

  - service: input_number.set_value
    target:
      entity_id: input_number.quick_strip_hue
    data:
      value: "{{ color }}"

  - service: input_select.select_option
    target:
      entity_id: input_select.quick_strip_effect
    data:
      option: "{{ option }}"

######################
# LZW45 Pixel Effect #
######################

# The main script for turning setting the pixel effects

lzw45_pixel_effect:
  alias: LZW45 Pixel Effect
  description: Sets the pixel effects for the Inovelli LZW45 LED Strip
  mode: restart
  fields:
    lzw45: 
      description: (required) The entity_id for the lzw45 LED Strip.
      example: light.light_strip
    effect:
      description: (required) The desired effect - static, blink, breath, color-wipe, color-wipe-reverse-inverse, color-wipe-random, random-color, single-dynamic, multi-dynamic, rainbow, rainbow-cycle, scan, dual-scan, fade, running-lights, twinkle, twinkle-random, twinkle-fade, twinkle-fade-random, sparkle, flash-sparkle, hyper-sparkle, strobe, blink-rainbow, chase-white, chase-color, chase-random, chase-rainbow, chase-flash, chase-flash-random, chase-rainbow-white, chase-blackout, chase-blackout-rainbow, color-sweep-random, running-color, running-red-blue, running-random, larson-scanner, comet, fireworks, fireworks-random, merry-christmas, circus-combustus, halloween, aurora
      example: breath
    brightness_pct:
      description: (optional) The brightness percent, 0 - 99.  Defaults to 99 if omitted.
      example: 99
  variables:
    byte1: >
      {%- set effect = effect | default('static') | lower | replace(' ', '-') %}
      {%- set effects = [
        'static',
        'blink',
        'breath',
        'color-wipe',
        'color-wipe-reverse-inverse',
        'color-wipe-random',
        'random-color',
        'single-dynamic',
        'multi-dynamic',
        'rainbow',
        'rainbow-cycle',
        'scan',
        'dual-scan',
        'fade',
        'running-lights',
        'twinkle',
        'twinkle-random',
        'twinkle-fade',
        'twinkle-fade-random',
        'sparkle',
        'flash-sparkle',
        'hyper-sparkle',
        'strobe',
        'blink-rainbow',
        'chase-white',
        'chase-color',
        'chase-random',
        'chase-rainbow',
        'chase-flash',
        'chase-flash-random',
        'chase-rainbow-white',
        'chase-blackout',
        'chase-blackout-rainbow',
        'color-sweep-random',
        'running-color',
        'running-red-blue',
        'running-random',
        'larson-scanner',
        'comet',
        'fireworks',
        'fireworks-random',
        'merry-christmas',
        'circus-combustus',
        'halloween',
        'aurora'
      ] %}
      {{ effects.index(effect) + 1 if effect in effects else 1 }}
    byte2: >
      {%- set pct = brightness_pct | default(99) | int %}
      {%- if 0 <= pct <= 99 %}
        {{ pct }}
      {%- else %}
        99
      {%- endif %}
    bytes: >
      {{ byte2 * 2**8 + byte1 }}
  sequence:
  - condition: template
    value_template: "{{ lzw45 is defined }}"

  - service: zwave_js.bulk_set_partial_config_parameters
    target:
      entity_id: "{{ lzw45 }}"
    data:
      parameter: 31
      value: "{{ bytes }}"

# Run button for the UI for pixel effect

lzw45_ui_pixel_effect:
  alias: LZW45 Update from UI Pixel Effect
  sequence:
  - service: script.lzw45_pixel_effect
    data:
      lzw45: *lzw45s
      effect: "{{ states('input_select.pixel_effect') | default('static') }}"
      brightness_pct: "{{ states('input_number.pixel_effect_brightness') | int(default=99) }}"
  - delay:
      seconds: 1

# Whenever the UI is adjusted, fire this script to merry all UI
# settings together and fire the script.

lzw45_change_ui_pixel_effect:
  alias: LZW45 Change UI Pixel Effect
  fields:
    effect:
      description: (Optional) Quick strip effect.
      example: aurora
    brightness_pct:
      description: (Optional) brightness
      example: 99
  variables:
    option: >
      {{ effect | default("aurora") }}
    brightness: >
      {{ brightness_pct | default(99) }}
  sequence:

  - service: input_select.select_option
    target:
      entity_id:
      - input_select.quick_strip_effect
    data:
      option: "{{ option }}"

  - service: input_number.set_value
    target:
      entity_id: input_number.pixel_effect_brightness
    data:
      value: "{{ brightness_pct }}"

  - service: script.lzw45_ui_pixel_effect


#######################
# LZW45 Custom Effect #
#######################

# The main script for turning setting the pixel effects

lzw45_custom_effect:
  alias: LZW45 Custom Effect
  description: Sets the custom effects for the Inovelli LZW45 LED Strip
  mode: restart
  fields:
    lzw45: 
      description: (required) The entity_id for the lzw45 LED Strip.
      example: light.lzw45_light_strip_level
    colors:
      description: (required) A list of colors, (1 to 4 colors).  Color choices are off, 2700k, 4500k, 6500k, red, orange, yellow, yellow-green, green, spring-green, cyan, azure, blue, violet, magenta, and random.
      example: "[ 'red', 'orange', 'yellow', 'off' ]"
    effects:
      description: (required) A list of colors (1 to 4 effects).  Color choices are fade, fade-blend, flash, chase, and chase-blend.
      example: "[ 'fade', 'fade-blend', 'fade', 'chase' ]"
    brightness_pcts:
      description: (optional) A list of brightness percents, 0 - 99.  Defaults to 99 if omitted.
      example: "[ 99, 99, 99, 99 ]"
    duration_units:
      description: (required) The units of the duration.  Choices are 100ms, seconds, minutes, hours.
      example: 100ms
    durations:
      description: (required) A list of durations (1-60).
      example: "[ 10, 10, 10, 10 ]"
    finish_behavior:
      description: (optional) The behavior when the effect reaches the max number of iterations.  Choices are off, previous-color, last-color-in-program.  Default is previous-color.
      example: previous-color
    iterations:
      description: (optional) The number of times the custom effect repeats (1-254).  255 is forever.  Default is 255.
      example: 255
  variables:
    service: >
      {{ service | default('ozw.set_config_parameter') }}
    transitions: >
      {%- set ns = namespace(counts=[]) %}
      {%- for item in [ colors, effects, brightness_pcts, durations ] %}
        {%- set ns.counts = ns.counts + [ item | length ] %}
      {%- endfor %}
      {{ ns.counts | min }}
    levels: >
      {%- set levels = brightness_pcts | default([]) %}
      {%- if not levels %}
        {{ [ 99 ] * transitions }}
      {%- else %}
        {%- set ns = namespace(levels = []) %}
        {%- for i in range(transitions) %}
          {%- set pct = levels[i] | int %}
          {%- set pct = pct if pct >= 0 else 0 %}
          {%- set pct = pct if pct <= 99 else 99 %}
          {%- set ns.levels = ns.levels + [ pct ] %}
        {%- endfor %}
        {{ ns.levels }}
      {%- endif %}
    parameter22: >
      {%- macro byte(color, effect) %}
        {%- set colors = [
          'off',
          '2700k',
          '4500k',
          '6500k',
          'red',
          'orange',
          'yellow',
          'yellow green',
          'green',
          'spring green',
          'cyan',
          'azure',
          'blue',
          'violet',
          'magenta',
          'random'
        ] %}
        {% set effects = [
          'fade', 
          'fade-blend', 
          'flash', 
          'chase', 
          'chase-blend'
        ] %}
        {%- if color in colors and effect in effects %}
          {%- set ci = colors.index(color) %}
          {%- set ei = effects.index(effect) %}
          {{- '{0:05b}{1:03b}'.format(ci, ei) }}
        {%- else %}
          {{- '00000000' }}
        {%- endif %}
      {%- endmacro %}
      {%- set ns = namespace(bytes=[]) %}
      {%- for i in range(transitions) %}
        {%- set ns.bytes = ns.bytes + [ byte(colors[i], effects[i]) | int(base=2, default=0) * 2**(i * 8) ] %}
      {%- endfor %}
      {{ ns.bytes | sum }}
    parameter23: >
      {%- set ns = namespace(bytes=[]) %}
      {%- for i in range(transitions) %}
        {%- set ns.bytes = ns.bytes + [ '{0:08b}'.format(levels[i]) | int(base=2, default=0) * 2**(i * 8) ] %}
      {%- endfor %}
      {{ ns.bytes | sum }}
    parameter24: >
      {%- set ns = namespace(bytes=[]) %}
      {%- for i in range(transitions) %}
        {%- set duration = durations[i] | int %}
        {%- set duration = duration if duration >= 1 else 1 %}
        {%- set duration = duration if duration <= 60 else 60 %}
        {%- set ns.bytes = ns.bytes + [ '{0:08b}'.format(duration) | int(base=2, default=0) * 2**(i * 8) ] %}
      {%- endfor %}
      {{ ns.bytes | sum }}
    parameter30: >
      {%- set iterations = iterations | default(255) | int %}
      {%- set iterations = iterations if iterations >= 0 else 0 %}
      {%- set byte1 = iterations if iterations <= 255 else 255 %}
      {%- set behaviors = [ 'off', 'previous-color', 'last-color-in-program' ] %}
      {%- set units = ['100ms', 'seconds', 'minutes', 'hours'] %}
      {%- set byte2 = behaviors.index(behavior) if behavior in behaviors else 1 %}
      {%- set byte3 = units.index(duration_units) if duration_units in units else 0 %}
      {{ '{0:08b}{1:08b}{2:08b}'.format(byte3, byte2, byte1) | int(base=2, default=0) }}
  sequence:

  - condition: template
    value_template: "{{ lzw45 is defined and transitions > 0 }}"

  - service: zwave_js.bulk_set_partial_config_parameters
    target:
      entity_id: "{{ lzw45 }}"
    data:
      parameter: 22
      value: "{{ parameter22 }}"

  - service: zwave_js.bulk_set_partial_config_parameters
    target:
      entity_id: "{{ lzw45 }}"
    data:
      parameter: 23
      value: "{{ parameter23 }}"

  - service: zwave_js.bulk_set_partial_config_parameters
    target:
      entity_id: "{{ lzw45 }}"
    data:
      parameter: 24
      value: "{{ parameter24 }}"

  - service: zwave_js.bulk_set_partial_config_parameters
    target:
      entity_id: "{{ lzw45 }}"
    data:
      parameter: 30
      value: "{{ parameter30 }}"

# Whenever the UI is adjusted, fire this script to merry all UI
# settings together and fire the script.

lzw45_ui_custom_effect:
  variables:
    count: >
      {{ states('input_number.custom_effects_count') | int(default=2) }}
    info: >
      {%- set name = 'custom_effects' %}
      {%- set items = {
        'input_number': ['brightness', 'duration'],
        'input_select': ['color', 'effect']
      } %}
      {%- set ns = namespace(ret=[]) %}
      {%- for domain, ids in items.items() %}
        {%- for id in ids %}
          {%- set inner = namespace(ret=[]) %}
          {%- for i in range(1, count + 1) %}
            {%- if id == 'color' %}
              {%- set value = states('{0}.{1}_{2}_{3}'.format(domain, name, id, i)) %}
            {%- else %}
              {%- set value = states('{0}.{1}_{2}'.format(domain, name, id)) %}
            {%- endif %}
            {%- set inner.ret = inner.ret + [ value | int(default=0) if domain == 'input_number' else '"{0}"'.format(value) ] %}
          {%- endfor %}
          {%- set ns.ret = ns.ret + [ '"{0}":['.format(id) ~ inner.ret | join(',') ~ ']' ] %}
        {%- endfor %}
      {%- endfor %}
      {{ '{' ~ ns.ret | join(',') ~ '}'}}
  sequence:
  - service: script.lzw45_custom_effect
    data:
      lzw45: *lzw45s
      colors: "{{ info.color }}"
      effects: "{{ info.effect }}"
      brightness_pcts: "{{ info.brightness }}"
      durations: "{{ info.duration }}"
      iterations: >
        {{ states('input_number.custom_effects_iterations') | int(default=255) }}
      behavior: >
        {{ states('input_select.custom_effects_behavior') | default('off') }}
      duration_units: >
        {{ states('input_select.custom_effects_units') | default('100ms') }}
  - delay:
      seconds: 1

#########################
# Zwave Multicast Group #
#########################

zwave_multicast_group:
  mode: parallel
  alias: Multicast to Zwave Switch/Light Group
  fields:
    group:
      description: (Required) The group of lights & switches
      example: group.bonus_room_area
    level:
      description: (Optional) The brightness level, switches will be on if the level is greater than 0.
      example: 99
  variables:
    brightness_pct: >
      {%- set brightness_pct = (level | int(0) / 255 * 100) | int %}
      {%- set brightness_pct = [ 0, brightness_pct ] | max %}
      {%- set brightness_pct = [ 99, brightness_pct] | min %}
      {{- brightness_pct }}
    value: >
      {%- set value = brightness_pct > 0 %}
      {{- value }}
    settings:
      light:
        command_class: 38
        property: targetValue
        endpoint: 0
        value: "{{ brightness_pct }}"
      switch:
        command_class: 37
        property: targetValue
        endpoint: 0
        value: "{{ value }}"
      switch.flood_light:
        endpoint: 1
      switch.sliding_door_sconce:
        endpoint: 2
      switch.double_plug_left:
        endpoint: 1
      switch.floating_double_plug_left:
        endpoint: 1
      switch.floating_double_plug_right:
        endpoint: 2
    lights: >
      {%- set lights = expand(group) | selectattr('domain', 'eq', 'light')  %}
      {%- set lights = lights | selectattr('state','eq', 'off' if value else 'on') %}
      {%- set lights = lights | map(attribute='entity_id') | list %}
      {{- lights or none }}
    switches: >
      {%- set switches = expand(group) | selectattr('domain', 'eq', 'switch') %}
      {%- set switches = switches | selectattr('state','eq', 'off' if value else 'on') %}
      {%- set switches = switches | map(attribute='entity_id') | list %}
      {{- switches or none }}
    items: >
      {%- set ns = namespace(items={}, spool={}) %}
      {%- set fmat = "('{0}': {1})" %}
      {%- set items = (switches or []) + (lights or []) %}
      {%- for item in items %}
        {%- set state_obj = expand(item) | first | default(none) %}
        {%- if state_obj and state_obj.domain in ['light','switch'] %}
          {%- set domain = state_obj.domain %}
          {%- set entity_id = state_obj.entity_id %}
          {%- set entity_ids = lights if domain == 'light' else switches %}
          {%- set current = settings[domain] %}
          {%- set current = dict(current, **settings[entity_id]) if entity_id in settings else current %}
          {%- set key = domain ~ '_' ~ current.items() | list | string | lower | regex_findall('[a-z0-9_]+') | join('_') %}
          {%- if key in ns.spool %}
            {%- set ns.spool = dict(ns.spool, **{key:ns.spool[key] + [entity_id]}) %}
          {%- else %}
            {%- set ns.spool = dict(ns.spool, **{key:[entity_id]}) %}
          {%- endif %}
          {%- set entity_ids = ns.spool[key] %}
          {%- set current = dict(domain=domain, **current) %}
          {%- set current = dict(current, entity_id=entity_ids) %}
          {%- set ns.items = dict(ns.items, **{key:current | string}) %}
        {%- endif %}
      {%- endfor %}
      [{{ ns.items.values() | unique | sort | list | join(', ') }}]
    execute: >
      {{ items is not none or items != [] }}
    total: >
      {{ items | length if execute else 0 }}
  sequence:
  - condition: template
    value_template: "{{ execute }}"
  - repeat:
      count: "{{ total }}"
      sequence:
      - service: zwave_js.multicast_set_value
        target:
          entity_id: "{{ items[repeat.index - 1].entity_id }}"
        data:
          command_class: "{{ items[repeat.index - 1].command_class }}"
          property: "{{ items[repeat.index - 1].property }}"
          endpoint: "{{ items[repeat.index - 1].endpoint }}"
          value: "{{ items[repeat.index - 1].value }}"
