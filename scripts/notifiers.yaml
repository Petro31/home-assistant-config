# General notification engine that adds timestamps

notify:
  alias: Notify
  fields:
    format: 
      description: The timestamp format for persistent notifications & notifications.  Annoucements do not have a timestamp.
      example: "%-I:%M:%S %p"
      default: "%-I:%M:%S %p"
      selector:
        text:
          type: text
    persistent_notification:
      description: On/Off for Persistent Notifications
      default: on
      example: on
      required: false
      selector:
        boolean:
    title:
      description: Title of the persistent notification.
      example: "Title"
      default: ""
      selector:
        text:
          type: text
    message:
      description: Message to be sent/annouced.
      example: "Hello"
      required: true
      selector:
        text:
          type: text
    image:
      description: Local image.
      example: "local\\images\\home.jpg"
      default: None
      selector:
        text:
          type: url
    notify: &notify_homeowners
      description: Devices to notify.
      example: notify.mobile_app_petro
      selector:
        select:
          options:
          - label: Petro
            value: notify.mobile_app_petro
          - label: Lambo
            value: notify.mobile_app_lindsays_iphone
          - label: Home Owners
            value: notify.homeowners
  variables:
    timestamp: >
      {% set t = now() %}
      {% if format is defined %}
        {{ None if format is none else t.strftime(format) }}
      {% else %}
        {{ t.strftime("%-I:%M:%S %p") }}
      {% endif %}
    persistent_notification: >
      {{ persistent_notification | default(true) }}
    out_notify: "{{ notify | default('notify.homeowners') }}"
    external_url: !secret external_url
    url: >
      {% if image | default %}
        {{ external_url }}/{{ image.replace('\\', '/') }}
      {% endif %}
    persistent_notification_data: >
      {% set ret = namespace(data=[]) %}
      {% if title | default %}
        {% set ret.data = ret.data +[('title', title)] %}
      {% endif %}
      {% if message | default %}
        {% set ret.data = ret.data +[('message', '[{}] {}'.format(timestamp, message) if timestamp else message)] %}
      {% endif %}
      {{ dict.from_keys(ret.data) or {'message': 'No Message Provided'} }}
    notification_data: >
      {% if image | default %}
        {{ dict(data={'attachment': {'url': url}}, **persistent_notification_data)}}
      {% else %}
        {{ persistent_notification_data }}
      {% endif %}

  sequence:
  - choose:
    - conditions: "{{ persistent_notification }}"
      sequence:
      - service: persistent_notification.create
        data: "{{ persistent_notification_data }}"
  - choose:
    - conditions: "{{ out_notify.startswith('notify.') }}"
      sequence:
      - service: "{{ out_notify }}"
        data: "{{ notification_data }}"

event:
  alias: Notify - Event
  fields:
    card: 
      description: The timestamp format for persistent notifications & notifications.  Annoucements do not have a timestamp.
    notify: *notify_homeowners
  variables:
    service_data:
      format: None
      title: >
        {{ card.primary | default('Unknown') }}
      message: >
        {{ card.secondary | default('Unknown') }}
      image: >
        {{ card.picture | default('local/images/home.jpg') }}
  sequence:
  - service: script.notify
    data: "{{ service_data }}"

events:
  alias: Notify - Events
  fields:
    test: 
      description: Test days ahead
      example: 50
      selector:
        number:
          min: 0
          max: 730
          mode: box
    notify: *notify_homeowners
  variables:
    days_ahead: [183, 90, 60, 30, 14, 7, 1]
    targets: >
      {{ days_ahead + [ test ] if test is defined else days_ahead }}
    events: >
      {{ state_attr('sensor.lambosino_s_random_events', 'events') | selectattr('days', 'in', targets) | list }}
  sequence:
  - condition: template
    value_template: "{{ events | count > 0 }}"
  - repeat:
      for_each: "{{ events }}"
      sequence:
      - service: script.event
        data: 
          card: "{{ repeat.item.card }}"
          notify: "{{ notify | default }}"

# call frigate notification.
# a small wrapper so that I can just call a script with a different notificaiton
# id.  This is required so that I can use anchors in the automation that calls it
# otherwise home assistant stupidly bitches about recieving the same key making
# anchors useless.  

silencable_frigate_notification:
  mode: parallel
  alias: Notify - Camera Detection
  max: 20
  fields: 
    id:
      description: The frigate payload id
      example: 1234567891.123456-abcdef
    camera:
      description: The name of the camera in frigate's configuration.
      example: kitchen
    message:
      description: Message to be sent/annouced.
      example: "Hello"
  variables:
    notify: notify.mobile_app_petro
    persistent_notification: on
  sequence: 

  - variables:
      silence: silence-{{ notify | replace(".", "-") | replace("_","-") }}-{{ camera }}

  - service: script.notify_frigate
    data:
      id: '{{ id }}'
      camera: '{{ camera }}'
      message: "{{ message }}"
      notify: '{{ notify }}'
      silence: "{{ silence }}"
      persistent_notification: "{{ persistent_notification }}"

  - wait_for_trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "{{ silence }}"
    timeout:
      seconds: 30
    continue_on_timeout: false

  - delay:
      minutes: 30

# General notification engine for frigate

notify_frigate:
  alias: Notify - Frigate
  mode: parallel
  max: 40
  fields:
    id:
      description: The frigate payload id
      example: 1234567891.123456-abcdef
      selector:
        text:
          type: text
    camera:
      description: The name of the camera in frigate's configuration.
      example: kitchen
      selector:
        text:
          type: text
    silence:
      description: The action that will silence the notification.
      example: silence-notify-mobile-app-petro-kitchen
      selector:
        text:
          type: text
    format: 
      description: The timestamp format for persistent notifications & notifications.  Annoucements do not have a timestamp.
      example: "%-I:%M:%S %p"
      selector:
        text:
          type: text
    persistent_notification:
      description: On/Off for Persistent Notifications
      example: on
      default: on
      selector:
        boolean:
    title:
      description: Title of the persistent notification.
      example: "Title"
      selector:
        text:
          type: text
    message:
      description: Message to be sent/annouced.
      example: "Hello"
      selector:
        text:
          type: text
    notify: *notify_homeowners
  variables:
    tag: >
      {{ id }}
    group: >
      frigate-notification-{{ camera }}
    image: >
      /api/frigate/notifications/{{ id }}/thumbnail.jpg?format=android
    thumbnail: >
      /api/frigate/notifications/{{ id }}/thumbnail.jpg
    base_url: !secret external_url
    video: >
      {{ base_url }}/api/frigate/notifications/{{ id }}/{{ camera }}/clip.mp4
    snapshot: >
      {{ base_url }}/api/frigate/notifications/{{ id }}/snapshot.jpg
    timestamp: >
      {%- set format = format | default("%-I:%M:%S %p") %}
      {{ as_timestamp(now(), none) | timestamp_custom(format, default="???") }}
    persistent_notification: >
      {{ persistent_notification | default(true) }}
    out_notify: "{{ notify | default('notify.homeowners') }}"
    out_title: >
      {{ title | default('') }}
    out_message: >
      {%- set message = message | default('No Message Provided') %}
      {{ '[{}] {}'.format(timestamp, message) }}
  sequence:
  # Initial Message
  - choose:
    - conditions: "{{ persistent_notification }}"
      sequence:
      - service: persistent_notification.create
        data:
          message: >
            {{ out_message }}
            ![image]({{ image }})
  - condition: template
    value_template: "{{ out_notify.startswith('notify.') }}"
  - service: "{{ out_notify }}"
    data:
      message: "{{ out_message }}"
      data:
        tag: '{{ tag }}'
        group: '{{ group }}'
        image: '{{ image }}'
        attachment:
          url: "{{ thumbnail }}"

    # Each clip
  - repeat:
      sequence:
      - wait_for_trigger:
        - platform: mqtt
          topic: frigate/events
          payload: '{{ id }}'
          value_template: '{{ value_json.after.id }}'
        timeout:
          minutes: 2
        continue_on_timeout: false
      - condition: template
        value_template: '{{ wait.trigger and wait.trigger.payload_json.type == "end" }}'
      - choose:
        - conditions: "{{ persistent_notification }}"
          sequence:
          - service: persistent_notification.create
            data:
              message: >
                {{ out_message }}
                
                ![image]({{ image }})

                [Click here to view clip]({{ video }})
      - service: "{{ out_notify }}"
        data:
          message: "{{ out_message }}"
          data:
            tag: "{{ tag }}"
            group: "{{ group }}"
            url: "{{ video }}"
            clickAction: "{{ video }}"
            image: "{{ image }}"
            sound: none
            attachment:
              url: "{{ thumbnail }}"
            actions:
            - action: URI
              title: View Clip
              uri: "{{ video }}"
            - action: URI
              title: View Snapshot
              uri: "{{ snapshot }}"
            - action: "{{ silence }}"
              title: Silence Notifications
              destructive: true
      until: '{{ wait.trigger and wait.trigger.payload_json.type == "end" }}'
