irrigation_mqtt_discovery:
  alias: MQTT Discovery
  mode: single
  variables:
    root: "homeassistant"
    sprinklers: >
      {%- set ns = namespace(items=[]) %}
      {%- for e in integration_entities('rainbird') | select('match', '^switch.') %}
        {%- set identifier = device_attr(e, 'identifiers') | list | first | last %}
        {%- set ns.items = ns.items + [
            dict(
                entity_id=e,
                identifier=identifier,
                object_id=e.split('.')[-1],
                name=device_attr(e, 'name'),
                manufacturer=device_attr(e, 'manufacturer')
            ) ] %}
      {%- endfor %}
      {{- ns.items }}
    area_ids: >
      {{ integration_entities('rainbird') | select('match', '^switch.') | map('area_id') | unique | list }}
  sequence:

    # Setup Cycle Devices
    - repeat:
        for_each: "{{ area_ids }}"
        sequence:

        - variables:
            unique_id: "{{ repeat.item | slugify }}"
            object_id: "{{ unique_id }}"
            device: 
              name: "{{ area_name(repeat.item) }} Sprinker Cycle"
              identifiers:
              - "{{ unique_id }}"
              manufacturer: Petro

        # Day Cycle Slider
        - service: mqtt.publish
          data: >
            {%- set domain = 'number' %}
            {%- set this_id = 'ds' %}
            {%- set topic = root ~ '/' ~ domain ~ '/' ~ unique_id ~ this_id ~ '/' %}
            {{ {
                'topic': topic ~ 'config',
                'payload': {
                    'name': 'Day Cycle',
                    'unique_id': unique_id ~ this_id,
                    'object_id': object_id ~ '_day_cycle',
                    'state_topic': topic ~ 'state',
                    'command_topic': topic ~ 'state',
                    'command_template': "{{ value }}",
                    'min': 1,
                    'max': 10,
                    'unit_of_measurement': 'days',
                    'device': device,
                    'retain': True,
                  } | to_json,
                'retain': True,
            } }}

        # enable/disable toggles.
        - service: mqtt.publish
          data: >
            {%- set domain = 'switch' %}
            {%- set this_id = 'sw' %}
            {%- set topic = root ~ '/' ~ domain ~ '/' ~ unique_id ~ this_id ~ '/' %}
            {{ {
                'topic': topic ~ 'config',
                'payload': {
                    'name': 'Status',
                    'unique_id': unique_id ~ this_id,
                    'object_id': object_id ~ '_status',
                    'state_topic': topic ~ 'state',
                    'command_topic': topic ~ 'state',
                    'device': device,
                    'retain': True,
                  } | to_json,
                'retain': True,
            } }}

    # Zones
    - repeat:
        for_each: "{{ sprinklers }}"
        sequence:
        - variables:
            object_id: "{{ repeat.item.object_id }}"
            unique_id: "{{ repeat.item.identifier | slugify | replace('_', '') }}"
            device: 
              name: "{{ repeat.item.name }}"
              identifiers:
              - "{{ repeat.item.identifier }}"
              manufacturer: Petro

        # Create Program Next Start Timestamp sensors
        - service: script.mqtt_automated_config
          data:
            name: Start
            domain: sensor
            object_id: "{{ object_id }}_start"
            unique_id: "{{ unique_id }}ts"
            device_class: timestamp
            device: "{{ device }}"

        # Create Program Last Ran Timestamp sensors
        - service: script.mqtt_automated_config
          data:
            name: Last Run
            domain: sensor
            object_id: "{{ object_id }}_last_run"
            unique_id: "{{ unique_id }}lr"
            device_class: timestamp
            device: "{{ device }}"

        # Create Program Duration numbers
        - service: mqtt.publish
          data: >
            {%- set domain = 'number' %}
            {%- set this_id = 'pd' %}
            {%- set topic = root ~ '/' ~ domain ~ '/' ~ unique_id ~ this_id ~ '/' %}
            {{ {
                'topic': topic ~ 'config',
                'payload': {
                    'name': 'Program Duration',
                    'unique_id': unique_id ~ this_id,
                    'object_id': object_id ~ '_program_duration',
                    'state_topic': topic ~ 'state',
                    'command_topic': topic ~ 'state',
                    'command_template': "{{ value }}",
                    'min': 1,
                    'max': 20,
                    'unit_of_measurement': 'minutes',
                    'device': device,
                    'retain': True,
                  } | to_json,
                'retain': True,
            } }}

        # Create enable/disable toggles.
        - service: mqtt.publish
          data: >
            {%- set domain = 'switch' %}
            {%- set this_id = 'sw' %}
            {%- set topic = root ~ '/' ~ domain ~ '/' ~ unique_id ~ this_id ~ '/' %}
            {{ {
                'topic': topic ~ 'config',
                'payload': {
                    'name': 'Status',
                    'unique_id': unique_id ~ this_id,
                    'object_id': object_id ~ '_status',
                    'state_topic': topic ~ 'state',
                    'command_topic': topic ~ 'state',
                    'device': device,
                    'retain': True,
                  } | to_json,
                'retain': True,
            } }}


get_next_irrigations:
  alias: Get Next Irrigation
  mode: single
  variables:
    schedule: >
      {%- set season_start = (states('sensor.irrigation_season_start') | as_datetime | as_local).date() | string %}
      {%- set season_end = (states('sensor.irrigation_season_end') | as_datetime | as_local).date() | string %}
      {%- set this_date = now().date() | string %}
      {%- set ns = namespace(items=[], programs=[], next_runs=[]) %}
      {%- set start = states('input_datetime.irrigation_program_start') %}
      {%- for e in integration_entities('rainbird') | select('match', '^switch.') | sort %}
        
        {# program #}
        {%- set program_area = e | area_id %}
        {%- set program_cycle = states('number.{0}_day_cycle'.format(program_area)) | int %}
        {%- set program_status = is_state('switch.{0}_status'.format(program_area), 'on') %}

        {# zones #}
        {%- set object_id = e.split('.')[-1] %}
        {%- set zone_duration = states('number.{0}_program_duration'.format(object_id)) | int %}
        {%- set zone_last_run = (states('sensor.{0}_last_run'.format(object_id)) | as_datetime | as_local).date() | string %}
        {%- set zone_status = is_state('switch.{0}_status'.format(object_id), 'on') %}
        {%- set zone_identifier = device_attr('sensor.{0}_start'.format(object_id), 'identifiers') | list | first | last %}

        {# Add cycle days to last_run date, then attach the time of day if the switch is enabled. #}

        {# Create a list of namespaces to increment minutes for each date #}
        {%- set next_run_day = (zone_last_run | as_datetime + timedelta(days=program_cycle)).date() | string %}
        {%- if next_run_day < this_date %}
          {%- set next_run_day = this_date %}
        {%- endif %}
        
        {%- set next_runs = ns.next_runs | selectattr('date', 'eq', next_run_day) | first | default(None) %}
        {%- if next_runs is none %}
          {%- set next_runs = namespace(date=next_run_day, minutes=0) %}
          {%- set ns.next_runs = ns.next_runs + [next_runs] %}
        {%- endif %}

        {%- set next_runs.minutes = ns.items | selectattr('date', 'eq', next_run_day) | selectattr('program_status', 'eq', True) | selectattr('zone_status', 'eq', True) | map(attribute='zone_duration') | sum %}
        {%- set next_run = (next_run_day ~ ' ' ~ start) | as_datetime | as_local %}

        {%- set ns.items = ns.items + [
          dict(
            area_id=program_area,
            object_id=object_id,
            program_cycle=program_cycle,
            program_status=program_status,
            zone_duration=zone_duration,
            zone_last_run=zone_last_run,
            zone_next_run_id=zone_identifier | slugify | replace('_', '') ~ 'ts',
            zone_next_run=(next_run + timedelta(minutes=next_runs.minutes)).isoformat(),
            zone_status=zone_status,
            date=next_run_day
          )
        ] %}
      {%- endfor %}
      {{- dict(
          zones=ns.items | rejectattr('date', '<', season_start) | rejectattr('date', '>=', season_end) | list
      ) -}}
  sequence:
  - stop: "Stop"
    response_variable: schedule


set_last_irrigation:
  alias: Set Last Irrigation
  mode: queued
  fields: 
    time:
      description: Time when the irrigation will start.
      required: True
      selector:
        time:
    date:
      description: Date when the irrigation will start.
      required: True
      selector:
        date:
    switches:
      description: List of entities used in the irrigation 
      required: True
      selector:
        entity:
          multiple: True
          filter:
          - integration: rainbird
            domain: switch
    reason:
      description: Did it rain or did we water?
      required: True
      selector:
        select:
          options:
          - label: Rain
            value: rain
          - label: Irrigation
            value: irrigation
  variables:
    sprinklers: >
      {# maps timestamp entity_id to the unique_id created in script.irrigation_mqtt_discovery #}
      {% set t = (date ~ ' ' ~ time) | as_datetime | as_local %}
      {%- set ns = namespace(items=[]) %}
      {%- for e in switches %}
        {%- set identifier = device_attr(e, 'identifiers') | list | first | last %}
        {%- set object_id = e.split('.') | last %}
        {%- set minutes = ns.items | map(attribute='duration') | sum %}
        {%- set data = dict(
          id=identifier | slugify | replace('_', '') ~ 'lr',
          duration=states('number.{0}_program_duration'.format(object_id)) | float(0),
          datetime=(t + timedelta(minutes=minutes)).isoformat(),
        ) -%}
        {%- set ns.items = ns.items + [ data ] %}
      {%- endfor %}
      {{- ns.items }}
  sequence:
  - repeat:
      for_each: "{{ sprinklers }}"
      sequence:
      - service: script.mqtt_automated_states
        data:
          domain: sensor
          unique_id: "{{ repeat.item.id }}"
          state: "{{ repeat.item.datetime }}"
          attributes: "{{ dict(by=reason) }}"
