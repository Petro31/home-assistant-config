notify_alexa_ui:
  alias: Button Helper
  mode: parallel
  fields:
    announce:
      description: Annouce or TTS (True for announce, False or omit for TTS)
      example: true
      default: on
      selector:
        boolean:
    user_id:
      description: Annouce or TTS (True for announce, False or omit for TTS)
      selector:
        text:
          type: text
  variables:

    # This configuration only holds differences between the input booleans
    # and the resulting areas.  Currently that is only master_bedroom to master.
    config:
      input_boolean.master_bedroom: master
    areas: >
      {% set entities = label_entities('echo_tts') %}
      {% set ns = namespace(items=[]) %}
      {% for boolean in entities | select('is_state', 'on') %}
        {% set area = config.get(boolean, boolean.split('.')[-1]) %}
        {% set ns.items = ns.items + [area] %}
      {% endfor %}
      {{ ns.items }}
    announce: >
      {{ announce | default(false) }}
    message: >
      {{ states('input_text.alexa_say') }}
    user_id: "{{ user_id | default(none) }}"
  sequence:
  - service: script.notify_area
    data:
      area: "{{ areas }}"
      message: "{{ message }}"
      announce: "{{ announce }}"
      user_id: "{{ user_id }}"


alexa_announce:
  alias: Announce Button
  mode: single
  sequence:
  - service: script.turn_on
    target:
      entity_id: script.notify_alexa_ui
    data:
      variables:
        announce: True
        user_id: >
          {{ context.user_id }}
  - delay: "00:00:01"

alexa_tts:
  alias: TTS Button
  mode: single
  sequence:
  - service: script.turn_on
    target:
      entity_id: script.notify_alexa_ui
    data:
      variables:
        announce: False
        user_id: >
          {{ context.user_id }}
  - delay: "00:00:01"


notify_area:
  alias: Area
  mode: parallel
  fields:
    area:
      description: List of areas to notify
      example: Living Room
      selector:
        select:
          multiple: true
          options:
            - label: Basement
              value: basement
            - label: Bonus Room
              value: bonus_room
            - label: Downstairs
              value: downstairs
            - label: Everywhere
              value: everywhere
            - label: Game Room
              value: game_room
            - label: Garage
              value: garage
            - label: Great Room
              value: great_room
            - label: Kitchen
              value: kitchen
            - label: Living Room
              value: living_room
            - label: Master
              value: master
    message:
      description: Message to send
      example: "Hello"
      selector:
        text:
          type: text
    announce:
      description: Annouce or TTS (True for announce, False or omit for TTS)
      example: true
      selector:
        boolean:
    user_id:
      description: User ID
      example: 22e2ad009e2d4637994cb494afe30c8e
      selector:
        text:
          type: text
  variables:
    areas:
    - area: basement
      announce: notify.basement_echo_dot_announce
      speak: notify.basement_echo_dot_speak
    - area: bonus_room
      announce: notify.bonus_room_echo_dot_announce
      speak: notify.bonus_room_echo_dot_speak
    - area: downstairs
      announce: notify.downstairs_announce
      speak: notify.downstairs_speak
    - area: everywhere
      announce: notify.everywhere_announce
      speak: notify.everywhere_speak
    - area: game_room
      announce: notify.game_room_echo_dot_announce
      speak: notify.game_room_echo_dot_speak
    - area: garage
      announce: notify.garage_echo_dot_announce
      speak: notify.garage_echo_dot_speak
    - area: great_room
      announce: notify.great_room_announce
      speak: notify.great_room_speak
    - area: kitchen
      announce: notify.kitchen_echo_dot_announce
      speak: notify.kitchen_echo_dot_speak
    - area: living_room
      announce: notify.living_room_echo_dot_announce
      speak: notify.living_room_echo_dot_speak
    - area: master
      announce: notify.master_echo_dot_announce
      speak: notify.master_echo_dot_speak
    timestamp: >
      {{ (datetime | default(now())).isoformat() }}
    input: >
      {{ message | string | default('Empty') }}
    target_person: >
      {{ user_id | default('22e2ad009e2d4637994cb494afe30c8e') }}
    found_person: >
      {{ states.person | selectattr('attributes.user_id', 'eq', target_person) | map(attribute='entity_id') | first | default }}
    found_user: >
      {{ state_attr(found_person, 'friendly_name') if found_person is not none else none }}
    user: >
      {{ found_user or 'unknown' }}
    should_announce: >
      {{ announce is defined and announce }}
    text: >
      {%- if message is defined and message is string and message %}
        {{ 'announcement from ' ~ user ~ ': ' if should_announce else '' }}{{ message.replace('fuck',"fu'ck").replace('shit',"sh'it").replace('bitch',"b'itch").replace('cunt', "kh'unt") }}
      {%- else %}none
      {%- endif %}
    method: >
      {{ 'announce' if should_announce else 'speak' }}
    formatted_area: >
      {{ area if area is list else [area] }}
    entities: >
      {{ areas | selectattr('area', 'in', formatted_area) | map(attribute=method) | list }}
    should_continue: >
      {{ text is not none and entities | length > 0 }}
    devices: >
      {{ entities | map('device_name') | map('replace', ' Echo Dot', '') | list }}
    attrs: >
      {%- set names = devices | join(', ') %}
      {{ { 'person': found_person, 'type': 'announce' if should_announce else 'tts','text': input, 'targets': names} }}
  sequence:
  - condition: template
    value_template: "{{ should_continue }}"
  - service: notify.send_message
    target:
      entity_id: "{{ entities | first }}"
    data:
      message: "{{ text }}"
  - service: script.mqtt_automated_states
    data:
      domain: sensor
      unique_id: alexa_last_tts
      state: "{{ timestamp }}"
      attributes: "{{ attrs | tojson }}"

clear_alexa_text:
  alias: Clear Text Box
  sequence:
    - service: input_text.set_value
      data:
        entity_id: input_text.alexa_say
        value: ""
    - delay:
        seconds: 1