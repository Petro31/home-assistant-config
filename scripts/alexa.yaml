notify_alexa_ui:
  alias: Alexa - Announce or TTS
  mode: parallel
  fields:
    announce:
      description: Annouce or TTS (True for announce, False or omit for TTS)
      example: true
      default: on
      selector:
        boolean:
    user_id:
      description: Annouce or TTS (True for announce, False or omit for TTS)
      selector:
        text:
          type: text
  variables:
    config: >
      {%- set ns = namespace(ret=[]) %}
      {%- for entity_id in states.media_player 
          | selectattr('attributes.last_called','defined') 
          | rejectattr('object_id', 'search', 'echo_dots') 
          | map(attribute='entity_id') %}
        {%- set boolean = entity_id.replace('_echo_dot', '').replace('media_player', 'input_boolean') %}
        {%- set ns.ret = ns.ret + [dict(boolean=boolean, player=entity_id)] %}
      {%- endfor %}
      {{ ns.ret }}
    service_data:
      entities: >
        {%- set ns = namespace(ret=[]) %}
        {%- for item in config if is_state(item.boolean,'on') %}
          {% set ns.ret = ns.ret + [ item.player ] %}
        {%- endfor %}
        {{ ns.ret }}
      announce: >
        {{ announce | default(false) }}
      message: >
        {{ states('input_text.alexa_say') }}
      user_id: "{{ user_id | default(none) }}"
  sequence:
  - service: script.notify_alexa
    data: "{{ service_data }}"

alexa_announce:
  alias: Alexa UI - Announce
  mode: single
  sequence:
  - service: script.turn_on
    target:
      entity_id: script.notify_alexa_ui
    data:
      variables:
        announce: True
        user_id: >
          {{ context.user_id }}
  - delay: "00:00:01"

alexa_tts:
  alias: Alexa - Text to Speech
  mode: single
  sequence:
  - service: script.turn_on
    target:
      entity_id: script.notify_alexa_ui
    data:
      variables:
        announce: False
        user_id: >
          {{ context.user_id }}
  - delay: "00:00:01"

notify_alexa:
  alias: Notify - Alexa
  mode: parallel
  fields:
    entities:
      description: List of entities
      example: media_player.xyz
      selector:
        entity:
          domain: media_player
          multiple: true
          integration: alexa_media
    message:
      description: Message to send
      example: "Hello"
      selector:
        text:
          type: text
    announce:
      description: Annouce or TTS (True for announce, False or omit for TTS)
      example: true
      selector:
        boolean:
    user_id:
      description: User ID
      example: 22e2ad009e2d4637994cb494afe30c8e
      selector:
        text:
          type: text
  variables:
    timestamp: >
      {{ (datetime | default(now())).isoformat() }}
    input: >
      {{ message | string | default('Empty') }}
    target_person: >
      {{ user_id | default('22e2ad009e2d4637994cb494afe30c8e') }}
    found_person: >
      {{ states.person | selectattr('attributes.user_id', 'eq', target_person) | map(attribute='entity_id') | first | default }}
    found_user: >
      {{ state_attr(found_person, 'friendly_name') if found_person is not none else none }}
    user: >
      {{ found_user or 'unknown' }}
    should_announce: >
      {{ announce is defined and announce }}
    text: >
      {%- if message is defined and message is string and message %}
        {{ 'announcement from ' ~ user ~ ': ' if should_announce else '' }}{{ message.replace('fuck',"fu'ck").replace('shit',"sh'it").replace('bitch',"b'itch").replace('cunt', "kh'unt") }}
      {%- else %}none
      {%- endif %}
    method: >
      {{ {'type':'announce', 'method': 'all'} if should_announce else {'type':'tts'} }}
    should_continue: >
      {{ text is not none and entities is defined }}
    attrs: >
      {%- set names = expand(entities or []) | map(attribute='name') | list | join(', ') | replace(' Echo Dot','') %}
      {{ { 'person': found_person, 'type': 'announce' if should_announce else 'tts','text': input, 'targets': names} }}
  sequence:
  - condition: template
    value_template: "{{ should_continue }}"
  - service: notify.alexa_media
    data:
      message: "{{ text }}"
      data: "{{ method }}"
      target: "{{ entities }}"
  - service: script.mqtt_automated_states
    data:
      domain: sensor
      unique_id: alexa_last_tts
      state: "{{ timestamp }}"
      attributes: "{{ attrs | tojson }}"

clear_alexa_text:
  alias: Alexa - Clear Text Box
  sequence:
    - service: input_text.set_value
      data:
        entity_id: input_text.alexa_say
        value: ""
    - delay:
        seconds: 1