mqtt_automated_states:
  alias: Mqtt - Publish State and Attributes
  mode: parallel
  fields: 
    <<: &mqtt-fields
      domain:
        description: The entities domain
        selector:
          text:
            type: text
      unique_id:
        description: The entities unique_id
        selector:
          text:
            type: text
      object_id:
        description: The entities object_id
        selector:
          text:
            type: text
    state:
      description: The entities state
      selector:
        text:
          type: text
    attributes:
      description: The entities attributes
      example: A dictionary {} in yaml
      selector:
        object:
  variables: 
    <<: &mqtt-variables
      root: "homeassistant"
      topic_root: >
        {%- if domain is not defined or unique_id is not defined %}
          {{- [ root, 'error'] | join('/') }}
        {%- else %}
          {{- [ root, domain, unique_id ] | join('/') }}
        {%- endif %}
    service_data: >
      {{ {
        'topic': topic_root ~ '/state',
        'payload': '' ~ { 'state': state, 'attributes': attributes | default({}) } | tojson,
        'retain': retain | default('true')
      } }}

  sequence:
  - service: mqtt.publish
    data: "{{ service_data }}"

mqtt_automated_config:
  alias: Mqtt - Publish Discovery
  mode: parallel
  fields: 
    <<: *mqtt-fields
    device_class: 
      description: The entities device class
      selector:
        text:
          type: text
  variables:
    name: >
      {% if object_id is defined %}
        {{ object_id | default('') | replace('_', ' ') | title }}
      {% elif unique_id is defined %}
        {{ unique_id | default('') | replace('_', ' ') | title }}
      {% else %}
        Unknown Entity
      {% endif %}
    <<: *mqtt-variables
    service_data: >
      {%- set items = [
        ("name", name),
        ("unique_id", unique_id | default(none)),
        ("object_id", object_id | default(none)),
        ("state_topic", topic_root ~ "/state"),
        ("value_template", "{{ value_json.state }}"),
        ("json_attributes_topic", topic_root ~ "/state"),
        ("json_attributes_template", "{{ value_json.attributes | tojson }}"),
        ("device_class", device_class | default(none) ),
        ("unit_of_measurement", unit_of_measurement | default(none) ),
        ("state_class", state_class | default(none))
      ] %}
      {% set payload = dict.from_keys(items | rejectattr('1', 'none') | list) %}
      {{ {
        'topic': topic_root ~ '/config',
        'payload': '' ~ payload | tojson,
      } }}
  sequence:
  - service: mqtt.publish
    data: "{{ service_data }}"
