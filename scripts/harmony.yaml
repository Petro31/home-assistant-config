harmony_activity_on:
  alias: Turn On Activity
  mode: restart
  description: >
    Turns on any harmony activity and optionally any specified devices.
  fields:
    activity:
      description: (Required) The harmony activity name.
      example: Xbox One
      required: true
      selector:
        select:
          options:
          - Chromecast
          - Playstation
          - Roku
          - Switch
          - TV
          - Xbox One
    <<: &remote_field
      remote:
        description: (Optional) The remote for the harmony activity
        example: remote.living_room
        required: true
        selector:
          entity:
            domain: binary_sensor
            device_class: door
    <<: &echo_field
      echo_through_reciever:
        description: (Optional) Switch that turns on/off bluetooth adapter for echo
        example: switch.echo_through_receiver
        selector:
          entity:
            domain: switch
  variables:
    harmony: "{{ remote | default('remote.living_room') }}"
    echo: "{{ echo_through_reciever | default('switch.echo_through_receiver') }}"
  sequence:
  - service: remote.turn_on
    target:
      entity_id: "{{ harmony }}"
    data:
      activity: "{{ activity }}"
  - wait_template: "{{ is_state_attr(harmony, 'current_activity', activity) }}"
  - service: switch.turn_off
    target:
      entity_id: "{{ echo }}"

harmony_activity_off:
  alias: Turn Off Activity
  mode: restart
  description: >
    Turns off all harmony activities.
  fields:
    <<: *remote_field
  variables:
    harmony: "{{ remote | default('remote.living_room') }}"
  sequence:
  - service: remote.turn_on
    target:
      entity_id: "{{ harmony }}"
    data:
      activity: PowerOff

harmony_all_off:
  alias: Turn All Off
  mode: single
  description: >
    Turns off all harmony activities and auxilary devices.
  fields:
    <<: *remote_field
    <<: *echo_field
  variables:
    poweroff: PowerOff
    harmony: "{{ remote | default('remote.living_room') }}"
    echo: "{{ echo_through_reciever | default('switch.echo_through_receiver') }}"
  sequence:
  - service: remote.turn_on
    target:
      entity_id: "{{ harmony }}"
    data:
      activity: "{{ poweroff }}"
  - wait_template: "{{ is_state_attr(harmony, 'current_activity', poweroff) }}"
  - service: switch.turn_off
    target:
      entity_id: "{{ echo }}"

roku_source_on:
  alias: Turn On Roku Activity
  mode: single
  description: >
    Turns on the harmony roku activity and opens the selected application.
  fields:
    source:
      description: (Required) The source to select on the roku
      example: Netflix
      required: true
      selector:
        select:
          options:
          - Home
          - Disney Plus
          - HBO Max
          - Hulu
          - Netflix
          - Peacock TV
          - Plex - Free Movies & TV
          - Prime Video
          - Redbox.
          - Roku Media Player
          - The Roku Channel
          - Vudu Movie & TV Store
          - YouTube
    roku:
      description: (Optional) The Roku media_player.
      example: media_player.roku_living_room
      selector:
        entity:
          domain: media_player
          integration: roku
    <<: *echo_field
  variables:
    switch: switch.roku
    media_player: "{{ roku | default('media_player.roku_living_room') }}"
    echo: "{{ echo_through_reciever | default('switch.echo_through_receiver') }}"
  sequence:
  - choose:
    - conditions:
      - condition: template
        value_template: "{{ is_state(switch, 'off') }}"
      sequence:
      - service: switch.turn_on
        target:
          entity_id: "{{ switch }}"
    default:
    - service: switch.turn_off
      target:
        entity_id: "{{ echo }}"
  - wait_template: "{{ is_state(switch, 'on') }}"
  - service: media_player.select_source
    target:
      entity_id: "{{ media_player }}"
    data:
      source: "{{ source }}"

power_on:
  alias: Power - Turn On Any Entity
  mode: parallel
  description: >
    Turns off any entity that can turn on, if they are off.
  fields: &power_fields
    entity:
      description: (Required) The entity in question
      example: media_player.yamaha_rx_v6a
      selector:
        entity:
  variables:
    state: 'off'
    service: "{{ entity.split('.')[0] }}.turn_on"
  sequence: &power_sequence
  - choose:
    - conditions:
      - condition: template
        value_template: "{{ is_state(entity, state) }}"
      sequence:
      - service: "{{ service }}"
        target:
          entity_id: "{{ entity }}"

power_off:
  alias: Power - Turn Off Any Entity
  mode: parallel
  description: >
    Turns off any entity that can turn off, if they are on.
  fields: *power_fields
  variables:
    state: 'on'
    service: "{{ entity.split('.')[0] }}.turn_off"
  sequence: *power_sequence

media_player_on:
  alias: Power - Turn On Any Media Player and Set Volume
  mode: single
  description: >
    Turns on any media player to a desired source and sets the volume to 0.7.
  fields: 
    <<: &media_player_field
      media_player:
        description: (Required) The media_player.
        example: media_player.yamaha_rx_v6a
        required: true
        selector:
          entity:
            domain: media_player
    <<: &source_field
      source:
        description: (Required) The source to select
        required: true
        example: Echo
        selector:
          text:
            type: text
    volume:
      description: (Required) The volume level
      example: 0.7
      selector:
        number:
          min: 0.0
          max: 1.25
          step: 0.05
          unit_of_measurement: Volume
  sequence:
  - service: script.power_on
    data:
      entity: "{{ media_player }}"

  - choose:
    - conditions:
      - condition: template
        value_template: "{{ not is_state_attr(media_player, 'volume_level', volume) }}"
      sequence:
      - service: media_player.volume_set
        target:
          entity_id: "{{ media_player }}"
        data:
          volume_level: "{{ volume }}"

  - choose:
    - conditions:
      - condition: template
        value_template: "{{ not is_state_attr(media_player, 'source', source) }}"
      sequence:
      - service: media_player.select_source
        target:
          entity_id: "{{ media_player }}"
        data:
          source: "{{ source }}"

media_player_off:
  alias: Power - Turn Off Any Media Player
  mode: single
  description: >
    Turns off any media player that is on.
  fields: 
    <<: *media_player_field
  sequence:
  - service: script.power_off
    data:
      entity: "{{ media_player }}"

echo_through_receiver_on:
  alias: Living Room Streaming - Echo at 30db.
  mode: single
  description: >
    Streams from an echo on all zones and sets volume to -30db.
  sequence:
  - service: script.power_on
    data:
      entity: switch.floating_outlet_switch
  
  - service: script.media_player_on
    data:
      media_player: media_player.yamaha_rx_v6a
      volume: 0.7
      source: audio3
  
  - service: script.media_player_on
    data:
      media_player: media_player.yamaha_rx_v6a_zone2
      volume: 0.7
      source: audio3

airplay_through_receiver_on:
  alias: Living Room Streaming - Airplay
  mode: single
  description: >
    Streams airplay on all zones and sets volume to -30db.
  sequence:
  - service: script.media_player_on
    data:
      media_player: media_player.yamaha_rx_v6a
      volume: 0.7
      source: airplay
  
  - service: script.media_player_on
    data:
      media_player: media_player.yamaha_rx_v6a_zone2
      volume: 0.7
      source: airplay

echo_through_receiver_off:
  alias: Living Room Streaming - All Off
  mode: single
  description: >
    Turns off all streaming.
  sequence:

  # Turns off audio one but does not turn off the reciever.
  - choose:
    - conditions:
      - condition: template
        value_template: "{{ is_state('media_player.yamaha_rx_v6a', 'on') and is_state('switch.poweroff', 'off') }}"
      sequence:
      - service: media_player.turn_off
        entity_id: media_player.yamaha_rx_v6a
      
  - service: script.power_off
    data:
      entity: media_player.yamaha_rx_v6a_zone2
      
  - service: script.power_off
    data:
      entity: switch.floating_outlet_switch

echo_through_media_player:
  alias: Basement Streaming - Any
  mode: single
  description: >
    Turns on a stream through the basement receiver.
  fields: 
    switch:
      description: (Required) The bluetooth switch
      example: switch.basement_bluetooth
      required: true
      selector:
        entity:
          domain: switch
    <<: *media_player_field
    desired_state: 
      description: (Required) The target state for the script
      example: 'on'
      required: true
      selector:
        text:
          type: text
    <<: *source_field
  variables:
    players: >
      {% if media_player is string %}
        {{ [media_player] }}
      {% elif media_player is not string and media_player is iterable and media_player is not mapping %}
        {{ media_player }}
      {% else %}
        {{ [] }}
      {% endif %}
    continue: >
      {{ media_player | length > 0 }}
  sequence:
  - condition: template
    value_template: "{{ continue }}"

  - service: script.power_{{ desired_state }}
    data:
      entity: "{{ switch }}"

  - repeat: 
      for_each: "{{ players }}"
      sequence:
      - service: script.media_player_{{ desired_state }}
        data:
          media_player: "{{ repeat.item }}"
          volume: 0.7
          source: "{{ source }}"
