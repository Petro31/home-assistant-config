- alias: Timed Event - Snapshot status
  id: snapshot_status
  trigger:
  - platform: state
    entity_id: sensor.samba_backup
  variables:
    valid: >
      {{ trigger | default(none) is not none and trigger.to_state is defined and trigger.from_state is defined }}"
    status: >
      {{ trigger.to_state.state | default | lower }}
    not_idle: >
      {{ status != 'idle' }}
  condition:
  - condition: template
    value_template: "{{ valid and not_idle }}"
  action:
  - service: script.notify
    data:
      title: Snapshot Status
      message: "Samba backup {{ status }}."

- alias: Timed Event - Garbage Day Message
  id: garbage_day_message
  trigger:
    - platform: time
      at: '10:00:00'
    - platform: time
      at: '15:30:00'
    - platform: time
      at: '19:00:00'
  condition:
    - condition: time
      weekday:
        - mon
  action:
    - service: script.notify
      data:
        message: "Trash day tomorrow!"
        
- alias: Timed Event - Change Filters Message
  id: change_filters_message
  trigger:
    - platform: time
      at: '10:00:00'
    - platform: time
      at: '19:00:00'
  condition:
    - condition: template
      value_template: "{{ now().day == 1 and now().month in [ 1, 4, 7, 10 ] }}"
  action:
    - service: script.notify
      data:
        message: "Change HVAC filter."
            
- alias: Timed Event - Mosby Heartworm and Flee Medication.
  id: mosby_heartworm
  trigger:
    - platform: time
      at: '10:00:00'
    - platform: time
      at: '19:00:00'
  condition:
    - condition: template
      value_template: "{{ now().day == 1 }}"
  action:
    - service: script.notify
      data:
        message: "Give mosby heartworm and flee medication."

- alias: Timed Event - DST Warning
  id: dst_warning
  trigger:
    - platform: time
      at: '10:00:00'
    - platform: time
      at: '19:00:00'
  condition:
    - condition: template
      value_template: >
        {{ states('sensor.daylight_savings_days_until') | int(0) in [7,1] }}
  action:
    - service: script.notify
      data:
        message: >
          {%- set days = states('sensor.daylight_savings_days_until') | int(0) %}
          {%- set plural = 's' if days | int(0) > 1 else '' %}
          Daylight savings in {{ days }} day{{plural}}, you will {{ states('sensor.daylight_savings_phrase') }}!

- alias: Timed Event - Indoor Christmas Lights
  id: indoor_christmas_lights
  trigger:
  - id: 'on'
    platform: time
    at: '16:00:00'
  - id: 'off'
    platform: time
    at: '23:00:00'
  condition:
  - condition: template
    value_template: "{{ is_state('binary_sensor.christmas_season', 'on') }}"
  action:
  - service: light.turn_{{ trigger.id }}
    target:
      entity_id: light.christmas_tree
  
- alias: Timed Event - Outdoor Lights On at Sunset, Off at Sunrise
  id: outdoor_lights_on_off
  trigger:
  - platform: sun
    event: sunset
  - platform: sun
    event: sunrise
  variables:
    event: >
      {{ trigger.event | default('invalid') }}
    next_season: >
      {%- set next = states('sensor.seasonal_lights') %}
      {%- if next not in ['unknown', 'unavailable'] %}
        {%- set d, s = next.split(', ') -%}
        {{ '{{"date": "{0}", "scene": "{1}" }}'.format(d, s) }}
      {%- else %}
        none
      {%- endif %}
    seasons:
      christmas: scene.holiday_bulbs_christmas
      thanksgiving: scene.holiday_bulbs_thanksgiving
      easter: scene.holiday_bulbs_easter
      valentines_day: scene.holiday_bulbs_valentines_day
      st_patricks_day: scene.holiday_bulbs_st_patricks_day
      4th_of_july: scene.holiday_bulbs_patriotic
      veterans_day: scene.holiday_bulbs_patriotic
      halloween: scene.holiday_bulbs_halloween
    start_scene: >
      {%- if next_season is not none and today_at().isoformat() == next_season.date %}
        {{ seasons.get(next_season.scene, 'scene.holiday_bulbs_soft_white') }}
      {%- else %}
        False
      {%- endif %}
    execute_scene: >
      {{ event == 'sunset' and start_scene }}
  condition:
  - condition: template
    value_template: "{{ event in ['sunset','sunrise'] }}"
  action:
  - choose:
    - conditions:
      - condition: template
        value_template: "{{ execute_scene }}"
      sequence:
      - service: scene.turn_on
        target:
          entity_id: "{{ start_scene }}"
      - service: switch.turn_on
        target:
          entity_id:
          - switch.flood_light
          - switch.sliding_door_sconce
    default:
    - service: light.turn_o{{ 'n' if event == 'sunset' else 'ff' }}
      target:
        entity_id:
        - light.outside_sunset

- alias: Timed Event - Clear persistent_notifications around bedtime.
  id: clear_persistent_notifications_around_bedtime
  trigger:
  - platform: time
    at: "22:00:00"
  variables:
    notification_ids: >
      {{ states.persistent_notification | map(attribute='object_id') | list }}
  condition:
  - condition: template
    value_template: "{{ notification_ids | length > 0 }}"
  action:
  - repeat:
      count: "{{ notification_ids | length }}"
      sequence:
      - service: persistent_notification.dismiss
        data:
          notification_id: "{{ notification_ids[repeat.index - 1] }}"
