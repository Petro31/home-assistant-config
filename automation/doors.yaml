- alias: Doors - MQTT Discovery on Startup
  id: mqtt_store_door_states_discovery
  mode: single
  trigger:
  - platform: homeassistant
    event: start
  variables:
    doors:
    # - test_door_last_opened
    - main_door_last_opened
    - sliding_door_last_opened
    - garage_door_tilt_last_opened
    - garage_entry_door_last_opened
    - rear_garage_door_tilt_last_opened
  action:
  - repeat:
      count: "{{ doors | length }}"
      sequence:
      - service: script.mqtt_automated_config
        data:
          domain: sensor
          unique_id: "{{ doors[repeat.index - 1] }}"
          device_class: timestamp

- alias: Doors - Notify when Open
  id: notify_on_door_state_change
  mode: parallel
  trigger: &door_trigger
  - platform: state
    entity_id:
    # - input_boolean.test_door
    - binary_sensor.main_door
    - binary_sensor.garage_entry_door
    - binary_sensor.sliding_door
    - binary_sensor.garage_door_tilt
    - binary_sensor.rear_garage_door_tilt
    from: 'off'
    to: 'on'
  variables:
    # notify: notify.mobile_app_petro
    notify: notify.homeowners
    valid: >
      {{ trigger | default(none) is not none and trigger.to_state is defined and trigger.from_state is defined }}
    source: >
      {%- if valid %}
        {{ trigger.to_state.entity_id }}
      {%- endif %}
    timestamp: >
      {%- set datetime = datetime | default(now()) %}
      {{ as_timestamp(datetime) | timestamp_custom("%Y-%m-%dT%H:%M:%S.%f+00:00", datetime.tzinfo == 'UTC') }}
    object_id: >
      {{ source.split('.')[-1] }}
    unique_id: >
      {{ object_id }}_last_opened
    count_script: >
      script.notify_count_{{ object_id }}
    sensor: > 
      sensor.{{ unique_id }}
    last_opened: >
      {{ states(sensor) | default('') }}
    quiet_window: >
      {%- set times = {
        'binary_sensor.main_door': 120,
        'binary_sensor.garage_entry_door': 120,
        'binary_sensor.sliding_door': 120,
        'input_boolean.test_door': 10,
      } %}
      {%- if valid and source in times %}
        {{ times[source] }}
      {%- else %}
        0
      {%- endif %}
    delta: >
      {%- set last = as_timestamp(last_opened) %}
      {%- if last is not none %}
        {{ as_timestamp(timestamp) - as_timestamp(last_opened) }}
      {%- else %}
        {{ quiet_window + 1}}
      {%- endif %}
    in_quiet_window: >
      {{ delta < quiet_window }}
    count: >
      {%- if in_quiet_window %}
        {%- set current = state_attr(sensor, 'count') %}
        {%- if current is none %}
          1
        {%- else %}
          {{ current | int + 1 }}
        {%- endif %}
      {%- else %}
        0
      {%- endif %}
    count_timestamp: >
      {%- if count == 0 %}
        {{ timestamp }}
      {%- else %}
        {{ state_attr(sensor, 'count_timestamp') }}
      {%- endif %}
    who: >
      {{ state_attr('sensor.people_at_home', 'or') }}
    what: >
      {{ state_attr(trigger.entity_id, 'friendly_name') }}

  condition: &door_condition
  - condition: template
    value_template: "{{ valid }}"

  action:

  # Update Door Sensors.

  - service: script.mqtt_automated_states
    data:
      domain: sensor
      unique_id: "{{ unique_id }}"
      state: "{{ timestamp }}"
      attributes: "{{ { 'who': who, 'count': count, 'source': source, 'count_timestamp': count_timestamp } | tojson }}"

  # Notify if this is the first time the door has been opened in a while.
  # Otherwise start a 'quiet time' duration and announce the number
  # of times the door has been opened over the duration.  The quiet duration
  # should be reset each parallel run.

  - choose:
    - conditions:
      - condition: template
        value_template: "{{ count > 0 }}"
      sequence:
      - service: "{{ count_script }}"
        data:
          door_name: "{{ what }}"
          duration: "{{ quiet_window }}"
          count: "{{ count + 1 }}"
          count_timestamp: "{{ count_timestamp }}"
          notify: "{{ notify }}"
    default:
    - service: script.notify
      data:
        title: "{{ what }} Opened!"
        message: >
          {{ who }} used the {{ what }}.
        notify: "{{ notify }}"

  # Handle an unknown person.

  - choose:
    - conditions:
      - condition: template
        value_template: "{{ who in ['unknown'] }}"
      sequence:
      - wait_for_trigger:
        - platform: template
          value_template: "{{ states('sensor.people_at_home') | int > 0 }}"
        timeout:
          seconds: 30
      - choose: 
          conditions:
          - condition: template
            value_template: >
              {{ as_timestamp(now()) - as_timestamp(timestamp) >= 30 }}
          sequence:
          - service: script.notify
            data:
              title: "{{ what }} user is still unknown!"
              message: >
                The person who used the {{ what | lower }} is still unknown!
              notify: "{{ notify }}"
        default:
        - service: script.notify
          data:
            title: "Found {{ what }} user!"
            message: >
              The person who used the {{ what | lower }} is {{ states('sensor.people_at_home', 'or') }}!
            notify: "{{ notify }}"

- alias: Doors - Notify when Open too long.
  id: notify_on_door_ajar
  mode: parallel
  trigger: *door_trigger
  variables:
    # notify: notify.mobile_app_petro
    notify: notify.homeowners
    valid: >
      {{ trigger | default(none) is not none and trigger.to_state is defined and trigger.from_state is defined }}
    source: >
      {%- if valid %}
        {{ trigger.to_state.entity_id }}
      {%- endif %}
    timestamp: >
      {%- set datetime = datetime | default(now()) %}
      {{ as_timestamp(datetime) | timestamp_custom("%Y-%m-%dT%H:%M:%S.%f+00:00", datetime.tzinfo == 'UTC') }}
    duration: >
      {%- set times = {
        'binary_sensor.main_door': 90,
        'binary_sensor.garage_entry_door': 90,
        'binary_sensor.sliding_door': 240,
        'binary_sensor.garage_door_tilt': 300,
        'binary_sensor.back_garage_door_tilt': 300,
        'input_boolean.test_door': 5,
      } %}
      {%- if valid and trigger.to_state.entity_id in times %}
        {{ times[trigger.to_state.entity_id] }}
      {%- endif %}
    door_name: >
      {{ state_attr(trigger.entity_id, 'friendly_name') }}

  condition: *door_condition

  action:
  - service: script.notify_if_ajar
    data:
      duration: "{{ duration }}"
      door: "{{ source }}"
      door_name: "{{ door_name }}"
      timestamp: "{{ timestamp }}"
      notify: "{{ notify }}"

- alias: Doors - Illuminate Door
  id: illuminate_doors_when_open
  mode: parallel
  trigger: 
  - platform: state
    entity_id:
    # - input_boolean.test_door
    - binary_sensor.main_door
    - binary_sensor.garage_entry_door
    - binary_sensor.sliding_door
    from: 'off'
    to: 'on'
  variables:

    # This is the metadata used to set all params for Illuminate door.
    # When you add an entity to the entities list for each door, you need to create
    # an accompanying script with the name `resume_{domain}_{object_id}: *resume_scene_after_duration`.
    # This script handles each 'timer' for each entity that is turned on.  Doing this gives
    # us the ability to cancel each 'resume' with a trigger of some sort (like double tap).
    # You also need to add the entity to the trigger in cancel_scheduled_resume_state.
    metadata: 
      binary_sensor.main_door:
        entities:
        - switch.foyer
        duration: 120
      binary_sensor.garage_entry_door:
        entities:
        - switch.garage_entry
        - switch.garage_cans
        duration: 120
      binary_sensor.sliding_door:
        entities:
        - light.dining_room_chandelier
        duration: 30
      input_boolean.test_door:
        entities:
        - input_boolean.test_switch
        - input_boolean.test_switch_2
        duration: 10
    valid: >
      {{ trigger | default(none) is not none and trigger.to_state is defined and trigger.from_state is defined }}
    source: >
      {%- if valid %}
        {{ trigger.to_state.entity_id }}
      {%- endif %}
    timestamp: >
      {%- set datetime = datetime | default(now()) %}
      {{ as_timestamp(datetime) | timestamp_custom("%Y-%m-%dT%H:%M:%S.%f+00:00", datetime.tzinfo == 'UTC') }}
    object_id: >
      {{ source.split('.')[-1] }}
    sensor: > 
      sensor.{{ object_id }}_last_opened
    script: > 
      script.resume_{{ object_id }}
    last_opened: >
      {{ states(sensor) | default('') }}

    # Make entities object for scene
    current: >
      {%- if valid and source in metadata %}
        {{ metadata[source] }}
      {%- endif %}
    snapshot_entities: >
      {{ current.entities | default([]) }}
    action_data: >
      {%- macro kvp(k, v) %}{{ '"{}"'.format(k) }}: {{ '"{}"'.format(v) if v is string and not (v.startswith('{') or v.startswith('['))else v }}{% endmacro %}
      {%- macro coll(item, t='curly') %}{{ '{}{}{}'.format('{' if t == 'curly' else '[',item | join(', ') if item is iterable and item is not string else item, '}' if t == 'curly' else ']') }}{% endmacro %}
      {%- set ns = namespace(entities=[], scene_ids=[], scripts=[]) %}
      {%- set brightness = current.brightness | default(255) %}
      {%- for entity in snapshot_entities %}
        {%- set ns.scripts = ns.scripts + [ '"script.resume_{}"'.format(entity.replace('.','_'))] %}
        {%- set ns.scene_ids = ns.scene_ids + [ '"{}"'.format(entity.replace('.','_'))] %}
        {%- if entity.startswith('light.') %}
          {%- set ret = [kvp('state', 'on'), kvp('brightness', brightness)] %}
        {%- else %}
          {%- set ret = kvp('state', 'on') %}
        {%- endif %}
        {%- set ns.entities = ns.entities + [ kvp(entity, coll(ret)) ] %}
      {%- endfor %}
      {%- set ret = [ kvp('entities', coll(ns.entities | join(','))), kvp('scripts', coll(ns.scripts | join(','), 'list')), kvp('scene_ids', coll(ns.scene_ids | join(','), 'list'))] %}
      {{ coll(ret) }}
    duration: >
      {{ current.duration | default(0)}}
    delta: >
      {%- set last = as_timestamp(last_opened) %}
      {%- if last is not none %}
        {{ as_timestamp(timestamp) - as_timestamp(last_opened) }}
      {%- else %}
        {{ duration + 1 }}
      {%- endif %}
    in_duration: >
      {{ delta < duration }}

  condition: &sun_door_condition
  - condition: template
    value_template: "{{ valid }}"
  - condition: state
    entity_id: sun.sun
    state: "below_horizon"

  action:
  - choose:
    - conditions:
      - condition: template
        value_template: "{{ not in_duration }}"
      sequence:
      - repeat:
          count: "{{ action_data.scene_ids | length }}"
          sequence:
          - service: scene.create
            data:
              scene_id: "{{ action_data.scene_ids[repeat.index - 1] }}"
              snapshot_entities: "{{ snapshot_entities[repeat.index - 1] }}"

      - service: scene.apply
        data:
          entities: "{{ action_data.entities }}"
  
  - wait_template: "{{ is_state(source, 'off') }}"

  - repeat:
      count: "{{ action_data.scripts | length }}"
      sequence:
      - event: illuminate_door
        event_data:
          service: "{{ action_data.scripts[repeat.index - 1] }}"
          duration: "{{ duration }}"
          scene_id: "{{ action_data.scene_ids[repeat.index - 1] }}"

- alias: Doors - Illuminate Event Handler
  id: illuminate_door_event_handler
  mode: parallel
  trigger:
  - platform: event
    event_type: illuminate_door
  variables:
    data: >
      {{ trigger.event.data | default({}) }}
    service: >
      {{ data.service | default }}
    duration: >
      {{ data.duration | default }}
    scene_id: >
      {{ data.scene_id | default }}
    valid: >
      {{ true if service and duration and scene_id else false }}
  condition: *sun_door_condition
  action:
  - service: "{{ service }}"
    data:
      duration: "{{ duration }}"
      scene_id: "{{ scene_id }}"

- alias: Doors - Cancel Scheduled Resume State
  id: cancel_scheduled_resume_state
  mode: parallel
  trigger:
  - platform: state
    entity_id:
    - switch.foyer
    - switch.garage_entry
    - switch.garage_cans
    - light.dining_room_chandelier
    # - input_boolean.test_switch
    # - input_boolean.test_switch_2
  variables:
    valid: >
      {{ trigger | default(none) is not none and trigger.to_state is defined and trigger.from_state is defined }}
    source: >
      {%- if valid %}
        {{ trigger.to_state.entity_id }}
      {%- endif %}
    script: >
      {{ 'script.resume_{}'.format(source.replace('.','_')) }}
  condition: *sun_door_condition
  action:
  - service: script.turn_off
    target:
      entity_id: "{{ script }}"