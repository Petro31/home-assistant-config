- alias: Keep Sunset Switches On.
  id: reaction_keep_sunset_switches_on
  mode: parallel
  trigger:
  - platform: state
    entity_id:
    - switch.passenger_sconce
    - switch.sconces_garage
    - switch.sconces_main_entrance
    to: 'off'
  variables:
    continue: >
      {{ trigger | default(none) is not none and trigger.to_state is defined and trigger.from_state is defined }}
  condition:
  - condition: template
    value_template: "{{ continue }}"
  action:
  - service: switch.turn_on
    target:
      entity_id: "{{ trigger.entity_id }}"
  - service: script.notify
    data:
      title: "Sunset Switch Turned Off"
      message: >
        {{ state_attr(trigger.entity_id, 'friendly_name') }} door sconce switch was turned off, turning back on.
  - service: script.notify_alexa
    data:
      message: Jim counter action initiative in affect. Turning on {{ state_attr(trigger.entity_id, 'friendly_name') }} door sconces.
      announce: False
      entities: media_player.living_room_echo_dot
  - condition: sun
    after: sunrise
    before: sunset
  - delay:
      seconds: 5
  - service: light.turn_off
    target:
      entity_id: light.outdoor_bulbs

- alias: Living Room Lamp Availability.
  id: reaction_keep_living_room_lamps_available
  mode: parallel
  trigger:
  - platform: state
    entity_id: &lamp_lights
    - light.jims_lamp
    - light.mikes_lamp
    - light.lindsays_lamp
    to: 'unavailable'
  variables:
    triggering: >
      {{ trigger.entity_id }}
    entities: *lamp_lights
    continue: >
      {{ trigger | default(none) is not none and trigger.to_state is defined and trigger.from_state is defined }}
    only_triggering_light: >
      {{ expand(entities) | rejectattr('entity_id', 'eq', triggering) | map(attribute='state') | select('eq', 'unavailable') | list | length == 0 }}
    name: >
      {{ state_attr(triggering, 'friendly_name') or 'unknown' }}
  condition:
  - condition: template
    value_template: "{{ continue and only_triggering_light }}"
  action:
  - service: script.notify
    data:
      message: >
        {{ name.capitalize() }} went unavailable!  Notifying living room.
  - service: script.notify_alexa
    data:
      message: >
        Please do not turn off living room lamps, turn the lamp back on.  If you want to turn on this lamp in the future, say: Turn on {{ name }}.  
      announce: False
      entities: media_player.living_room_echo_dot

- alias: Alexa Media Player Startup
  id: e0bd3754-7045-4b63-a396-83845637e010
  description: Reloads alexa media player if the integration does not come online. 
  mode: single
  trigger:
  - platform: homeassistant
    event: start
  action:
  - delay:
      seconds: 15
  - service: homeassistant.reload_config_entry
    target:
      entity_id: media_player.living_room_echo_dot
    data: {}
  - service: script.notify
    data:
      notify: notify.mobile_app_petro
      message: >
        Reloading Alexa Media Player Integration

- alias: Fix Zwave Multicast Errors
  id: 6c4bb70c-e8a7-40c8-9c78-bb077023e3b9
  description: Refreshes a zwave multicast light and attempts to fix it.
  mode: single
  triggers:
  - trigger: state
    entity_id: sensor.multicast_error
    <<: &unavailable
      not_from:
      - unknown
      - unavailable
      not_to:
      - unknown
      - unavailable
  variables:
    action: "{{ trigger.to_state.attributes.action | default(None) }}"
    entity_id: "{{ trigger.to_state.attributes.entity_id | default(None) }}"
    new: &new >
      {# Stops reload template from triggering. #}
      {%- set t = now() %}
      {%- set yesterday = t - timedelta(hours=24) %}
      {{ t - trigger.to_state.state | as_datetime(yesterday) | as_local < timedelta(seconds=10) }}
    continue: "{{ action is not none and entity_id is not none and new }}"
  conditions:
  - condition: template
    value_template: "{{ continue }}"
  action:
  - action: script.notify
    data:
      notify: notify.mobile_app_petro
      title: Multicast Error
      message: Refreshing {{ state_attr(entity_id, 'friendly_name') }}

  - action: script.get_zwave_entities_from_light_group
    data:
      light: "{{ entity_id }}"
    response_variable: response

  - delay: 1

  - action: zwave_js.refresh_value
    target:
      entity_id: "{{ response.entity_id }}"

  - action: "{{ action }}"
    target:
      entity_id: "{{ entity_id }}"

- alias: Fix Wled Errors
  id: 06cfa18a-fa57-406d-94dc-5037e6096b87
  description: Refreshes a zwave multicast light and attempts to fix it.
  mode: single
  triggers:
  - trigger: state
    entity_id: sensor.wled_api_error
    <<: *unavailable
  variables:
    entities:
    - light.kitchen_cabinet_2
    - light.cabinet_master
    - light.cabinet_slave
    to_state: "{{ states('switch.kitchen_cabinet') }}"
    filtered: >
      {{ entities | reject('is_state', to_state) | list }}
    new: *new
    continue: >
      {{ filtered | length > 0 and new }}
  conditions:
  - condition: template
    value_template: "{{ continue }}"
  action:
  - action: script.notify
    data:
      notify: notify.mobile_app_petro
      title: WLED Error
      message: Refreshing {{ filtered | map('state_attr', 'friendly_name') | list | join(', ') }}

  - delay: 1

  - action: homeassistant.turn_{{ to_state }}
    target:
      entity_id: "{{ filtered }}"

- alias: Fix Doorbell Chime Status
  id: 3f1c8cab-0151-4961-854e-80fdb956fcae
  description: Checks to see if the doorbell chime is on periodically.
  triggers:
  - id: turn_on
    trigger: state
    entity_id: switch.doorbell_chime_active
    to: 'off'
    for:
      minutes: 5
  - id: turn_on
    trigger: template
    value_template: "{{ states('sensor.doorbell_chime_off') | float(0) == 5 }}"
  - id: check
    trigger: time
    at: '8:00:00'
  variables:
    message: >
      {% if trigger.id == 'turn_on' %}
        Doorbell chime has been off for at least 5 minutes.  Turning Back on.
      {% elif is_state('sensor.doorbell_chime_off', 'off') %}
        Doorbell chime was found to be off at 8am, turning back on.
      {% else%}
        None
      {% endif %}
    continue: "{{ message is not none }}"
  conditions:
  - condition: template
    value_template: "{{ continue }}"
  action:
  - action: script.notify
    data:
      notify: notify.mobile_app_petro
      title: Fixing Doorbell Chime
      message: "{{ message }}"

  - action: switch.turn_on
    target:
      entity_id: switch.doorbell_chime_active

- alias: Play/Pause lighting in living room
  id: 0c371ea2-c700-476b-9c3d-b36bd3c9a662
  description: Turn on lighting when paused, turn off lighting when playing.
  triggers:
  - trigger: state
    entity_id: media_player.roku_living_room
    to:
    - playing
    - paused
    not_from:
    - unavailable
    - unknown
  variables:
    light: light.living_room
    media_state: "{{ trigger.to_state.state }}"
    light_state: "{{ 'on' if media_state == 'paused' else 'off' }}"
    movie_time: "{{ is_state('switch.movie_time', 'on') }}"
    turned_on_by_this: >
      {% if this.context.parent_id is not none %}
        {{ light | expand | selectattr('state', 'eq', 'on') | selectattr('context.parent_id', 'eq', this.context.parent_id) | map(attribute='entity_id') | list }}
      {% else %}
        []
      {% endif %}
    living_room_lights: >
      {% if movie_time and media_state == 'paused' and is_state(light, 'off') %}
        {{ state_attr(light, 'entity_id') }}
      {% elif movie_time and media_state == 'playing' and is_state(light, 'on') %}
        {{ turned_on_by_this }}
      {% else %}
        []
      {% endif %}
  conditions:
  - condition: template
    value_template: "{{ living_room_lights | length > 0 }}"
  actions:
  - action: light.turn_{{ light_state }}
    target:
      entity_id: "{{ living_room_lights }}"
