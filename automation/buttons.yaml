- alias: Zigbee Button Toggler
  id: button_toggle_lights
  mode: parallel
  trigger:
  - platform: state
    entity_id:
    - event.workshop_button_action
    - event.mikes_button_action
    - event.jims_button_action
    - event.lindsays_button_action
  variables:
    continue: >
      {{ trigger | default(none) is not none and trigger.to_state is defined and trigger.from_state is defined }}
    event: >
      {{ trigger.to_state.attributes.event_type | default('') if continue else '' }}
    source: >
      {{ trigger.entity_id }}
    config:
      event.workshop_button_action:
        single:
        - light.workshop_desk
        double:
        - light.workshop_desk
        - light.workshop_bench_strip
        hold:
        - light.workshop_desk
        - light.workshop_dome
        - switch.floating_double_plug_left
        - light.workshop_bench_strip
      event.mikes_button_action:
        single:
        - light.mikes_lamp
        double:
        - light.living_room
        hold:
        - switch.movie_time
      event.jims_button_action:
        single:
        - light.jims_lamp
        double:
        - light.all_living_room
        hold:
        - light.all_living_room
      event.lindsays_button_action:
        single:
        - light.lindsays_lamp
        double:
        - light.living_room
        hold:
        - light.all_living_room
    which: >
      {%- set item = config.get(source, {}) %}
      {{ item.get(event, []) }}
    targets: >
      {{ which | count > 0 }}
    are_on: >
      {{ which | select('is_state', 'on') | list | count > 0 }}
  condition:
  - condition: template
    value_template: "{{ continue and targets }}"
  action:
  - service: homeassistant.turn_o{{ 'ff' if are_on else 'n' }}
    target:
      entity_id: "{{ which }}"

- alias: Living Room Scene Controller
  id: button_living_room_scene_controller
  mode: parallel
  trigger:
  - platform: event
    event_type: zwave_js_value_notification
  variables:
    device: >
      {{ trigger.event.data.device_id }}
    value: >
      {{ trigger.event.data.value }}
    label: >
      {{ trigger.event.data.label }} 
    config:
      215253fb0f54a57d98bc940fac442073:
        # Top Left Button
        'Scene 001': 
          KeyPressed:
            service: light.toggle
            data:
              entity_id: light.downstairs_ambiance
          # KeyPressed2x:
          # KeyPressed3x:
          # KeyPressed4x:
          # KeyPressed5x:

        # Top Right Button
        'Scene 002':
          KeyPressed:
            service: light.toggle
            data:
              entity_id: light.living_room_uplight
          # KeyPressed2x:
          # KeyPressed3x:
          # KeyPressed4x:
          # KeyPressed5x:
        
        # Bottom Left Button
        'Scene 003':
          KeyPressed:
            service: light.toggle
            data:
              entity_id: light.dining_room_uplight_1
          # KeyPressed2x:
          # KeyPressed3x:
          # KeyPressed4x:
          # KeyPressed5x:

        # Bottom Right Button
        'Scene 004':
          KeyPressed:
            service: light.toggle
            data:
              entity_id:  light.dining_room_uplight_2
          # KeyPressed2x:
          # KeyPressed3x:
          # KeyPressed4x:
          # KeyPressed5x:
        
        # Top button
        'Scene 005':
          KeyPressed:
            service: light.toggle
            data:
              entity_id: light.living_room
          KeyPressed2x: 
            service: light.toggle
            data:
              entity_id: light.all_living_room
          # KeyPressed3x:
          # KeyPressed4x:
          # KeyPressed5x:

      f7a1fe2db74bf6a3b652301589f7cebc:

        # Top Left Button
        'Scene 001': 
          KeyPressed:
            service: light.toggle
            data:
              entity_id: light.mikes_lamp
          # KeyPressed2x:
          # KeyPressed3x:
          # KeyPressed4x:
          # KeyPressed5x:

        # Top Right Button
        'Scene 002':
          KeyPressed:
            service: light.toggle
            data:
              entity_id: light.lindsays_lamp
          # KeyPressed2x:
          # KeyPressed3x:
          # KeyPressed4x:
          # KeyPressed5x:

        # Bottom Left Button
        'Scene 003':
          KeyPressed:
            service: light.toggle
            data:
              entity_id: light.jims_lamp
          # KeyPressed2x:
          # KeyPressed3x:
          # KeyPressed4x:
          # KeyPressed5x:

        # Bottom Right Button
        'Scene 004':
          KeyPressed:
            service: switch.toggle
            data:
              entity_id: switch.hyperion_usb_capture
          KeyPressed2x:
            service: switch.toggle
            data:
              entity_id: switch.hyperion_cinema
          KeyPressed3x:
            service: switch.toggle
            data:
              entity_id: switch.hyperion_rainbow_swirl_fast
          # KeyPressed4x:
          # KeyPressed5x:

        # Top button
        'Scene 005':
          KeyPressed:
            service: light.toggle
            data:
              entity_id: light.living_room
          KeyPressed2x: 
            service: light.toggle
            data:
              entity_id: light.all_living_room
          # KeyPressed3x:
          # KeyPressed4x:
          # KeyPressed5x:
    service: >
      {{ config.get(device, {}).get(label, {}).get(value, {}).get('service') }}
    data: >
      {{ config.get(device, {}).get(label, {}).get(value, {}).get('data') }}
  condition:
  - condition: template
    value_template: "{{ service is not none and data is not none }}"
  action:
  - service: "{{ service }}"
    data: "{{ data }}"

- alias: Living Room Scene Controller LEDs
  id: button_living_room_scene_controller_leds
  mode: queued
  trigger:
  - platform: state
    entity_id:
    - light.mikes_lamp
    - light.lindsays_lamp
    - light.jims_lamp
    - switch.hyperion_usb_capture
    - switch.hyperion_cinema
    - switch.hyperion_rainbow_swirl_fast
    - light.all_living_room
    - light.downstairs_ambiance
    - light.dining_room_uplight_1
    - light.dining_room_uplight_2
    - light.living_room_uplight
  variables:
    values:
      'on': 2
      'off': 3
      'unavailable': 3
      'unknown': 3
    colors:
      white: 0
      blue: 1
      green: 2
      red: 3
    config:
      light.mikes_lamp:
        devices: &controller1 f7a1fe2db74bf6a3b652301589f7cebc
        parameter: &top_left 2
      light.lindsays_lamp: 
        devices: *controller1
        parameter: &top_right 3
      light.jims_lamp:
        devices: *controller1
        parameter: &bottom_left 4
      switch.hyperion_usb_capture: 
        devices: *controller1
        parameter: &bottom_right 5
      switch.hyperion_cinema: 
        devices: *controller1
        parameter: *bottom_right
      switch.hyperion_rainbow_swirl_fast:
        devices: *controller1
        parameter: *bottom_right
      light.all_living_room:
        devices: 
        - *controller1
        - &controller2 215253fb0f54a57d98bc940fac442073
        parameter: 1
      light.downstairs_ambiance:
        devices: *controller2
        parameter: *top_left
      light.dining_room_uplight_1:
        devices: *controller2
        parameter: *bottom_left
      light.dining_room_uplight_2:
        devices: *controller2
        parameter: *bottom_right
      light.living_room_uplight:
        devices: *controller2
        parameter: *top_right
    value: >
      {{ values.get(trigger.to_state.state) }}
    state_parameter: >
      {{ config.get(trigger.entity_id, {}).get('parameter') }}
    devices: >
      {% set devices = config.get(trigger.entity_id, {}).get('devices') %}
      {{ devices if devices is list else [devices] }}
    color_parameter: >
      {{ state_parameter + 5 if state_parameter is not none else none }}
    state_good: >
      {{ trigger.to_state.state in ['on', 'off'] }}
    state_bad: >
      {{ trigger.to_state.state in ['unavailable', 'unknown'] }}
    state_off: >
      {{ trigger.to_state.state == 'off' }}
    color: >
      {% if state_good and state_off %}
        {{ colors.get('white') }}
      {% elif state_bad %}
        {{ colors.get('red') }}
      {% else %}
        None
      {% endif %}
  condition:
  - condition: template
    value_template: "{{ value is not none and state_parameter is not none }}"
  action:
  - repeat:
      for_each: "{{ devices }}"
      sequence:
      - <<: &target
          service: zwave_js.bulk_set_partial_config_parameters
          target:
            device_id: "{{ repeat.item }}"
        data:
          parameter: "{{ state_parameter }}"
          value: "{{ value }}"

  # Only set the color if we are 'off', 'unavailable', or 'unknown'

  - condition: template
    value_template: "{{ color is not none and (state_bad or state_off) }}"

  - repeat:
      for_each: "{{ devices }}"
      sequence:
      - <<: *target
        data:
          parameter: "{{ color_parameter }}"
          value: "{{ color }}"
