- binary_sensor:
  - unique_id: indoor_holiday
    name: Indoor Holiday
    device_class: light
    state: >
      {% set t = now() %}
      {% set s = today_at(states('input_datetime.indoor_holiday_lights_start')) %}
      {% set e = today_at(states('input_datetime.indoor_holiday_lights_end')) %}
      {{ s <= t <= e and not is_state('sensor.holiday_lighting', 'no_holiday') }}
    attributes:
      entity_id: >      
        {%- set holiday = states('sensor.holiday_lighting') %}
        {%- set entities = [
              'switch.uplight_holiday',
              'switch.hutch_holiday',
              'switch.cabinet_holiday',
            ] %}
        {%- set holidays = {
            'christmas': [
              'switch.front_trees',
              'switch.living_room_window',
              'switch.uplight_holiday',
              'switch.hutch_holiday',
              'switch.cabinet_holiday',
            ]} %}
        {{ holidays.get(holiday, entities) }}

- trigger:
  - platform: time
    at: "00:00:00"
  - platform: homeassistant
    event: start
  - platform: event
    event_type: templates_reloaded
  action:
  - action: script.get_indoor_holiday
    response_variable: response
  - variables:
      entities: >
        {%- set ns = namespace(items=[]) %}
        {%- for section in response.lights %}
          {%- for light in section.entity_id %}
            {%- set extra = {} if not section.data else dict(attributes=section.data) %}
            {%- set ns.items = ns.items + [dict(entity_id=light, **extra)] %}
          {%- endfor %}
        {%- endfor %}
        {{ ns.items }}
  sensor:
  - unique_id: 87f4f2b9-f15c-4948-a4fe-6316ecd0d98e
    name: Seasonal Accent Lights
    state: "{{ entities | length }}"
    attributes:
      settings: "{{ entities }}"
      ui: >
        {% set ambiance_entity = 'light.great_room_ambiance' %}
        {% set accent_entity = 'light.great_room_accent' %}
        {% set ambiance = set(state_attr(ambiance_entity, 'entity_id')) %}
        {% set accent = set(state_attr(accent_entity, 'entity_id')) %}
        {% set seasonal = set(state_attr('sensor.seasonal_accent_lights', 'settings') | map(attribute='entity_id') | list) %}
        {% set extra = seasonal - ambiance %}
        {% set guess = seasonal - extra %}
        {% if ambiance == guess %}
          {{ [ambiance_entity] + extra | list }}
        {% elif accent == guess %}
          {{ [accent_entity] + extra | list }}
        {% else %}
          {{ [ambiance_entity] }}
        {% endif %}

- sensor:
  - unique_id: seasonal_lights
    name: Seasonal Lights
    state: >
      {%- set scenes = dict(
        christmas="scene.holiday_bulbs_christmas",
        easter="scene.holiday_bulbs_easter",
        halloween="scene.holiday_bulbs_halloween",
        independence_day="scene.holiday_bulbs_patriotic",
        veterans_day="scene.holiday_bulbs_patriotic",
        memorial_day="scene.holiday_bulbs_patriotic",
        st_patricks_day="scene.holiday_bulbs_st_patricks_day",
        thanksgiving="scene.holiday_bulbs_thanksgiving",
        valentines="scene.holiday_bulbs_valentines_day",
      ) %}
      {%- set holiday = states('sensor.holiday_lighting') %}
      {{ scenes.get(holiday, "scene.holiday_bulbs_soft_white") }}

- trigger:
  - platform: time
    at: "00:00:00"
  - platform: homeassistant
    event: start

  # If you end up here to copy this, it relies on an automation in config\automation\events
  # named "Events - Forward Reload Templates"
  - platform: event
    event_type: templates_reloaded
  - platform: state
    entity_id: input_select.holiday_override
  action:
  - variables:
      holidays:

        # These holidays are meant to be used with easy_time.jinja
        # start, end, and event are all dictionaries that contain macro and kwargs.
        # macro is the macro used from easy_time.jina.
        # kwargs are the arguments used by name, e.g. if the macro uses month, day as inputs
        # kwargs will be set to month: #, day: #.

        valentines:
          event:
            macro: month_day
            kwargs:
              month: 2
              day: 14
          before:
            days: 14
          after:
            days: 1

        st_patricks_day:
          event:
            macro: month_day
            kwargs:
              month: 3
              day: 17
          before:
            days: 6
          after:
            days: 1

        easter:
          event:
            macro: easter
          before:
            days: 6
          after:
            days: 1

        memorial_day:
          event:
            macro: last_day_in_month
            kwargs:
              month: 5
              weekday: 0
          before:
            days: 6
          after:
            days: 1

        independence_day:
          event:
            macro: month_day
            kwargs:
              month: 7
              day: 4
          before:
            days: 6
          after:
            days: 1

        halloween:
          start:
            macro: month_day
            kwargs:
              month: 10
              day: 1
          end:
            macro: month_day
            kwargs:
              month: 11
              day: 1

        veterans_day:
          event:
            macro: month_day
            kwargs:
              month: 11
              day: 11
          before:
            days: 6
          after:
            days: 1

        thanksgiving:
          start:
            macro: month_day
            kwargs:
              month: 11
              day: 2
          end:
            macro: month_week_day
            kwargs:
              month: 11
              week: 4
              weekday: 6

        christmas:
          start:
            macro: month_week_day
            kwargs:
              month: 11
              week: 4
              weekday: 7
          end:
            macro: month_day
            kwargs:
              month: 1
              day: 7

      event: >
        {%- set override = states('input_select.holiday_override') %}
        {%- if override == 'automatic' %}
          {%- import 'easy_time.jinja' as easy_time %}
          {%- set dflt = {'minutes': 0 } %}
          {%- set ns = namespace(events=[], found='no_holiday') %}
          {%- for holiday, items in holidays.items() %}
            {%- set event = items.get('event') %}
            {%- set start = items.get('start') %}
            {%- set end = items.get('end') %}
            {%- if event %}
              {%- set e = easy_time[event['macro']](**event.get('kwargs', {})) | as_datetime | as_local %}
              {%- set b = timedelta(**items.get('before', dflt)) %}
              {%- set a = timedelta(**items.get('after', dflt)) %}
              {%- set ns.events = ns.events + [ (holiday, e - b), ('no_holiday', e + a) ] %}
            {%- elif start and end %}
              {%- set s = easy_time[start['macro']](**start.get('kwargs', {})) | as_datetime | as_local %}
              {%- set e = easy_time[end['macro']](**end.get('kwargs', {})) | as_datetime | as_local %}
              {%- set ns.events = ns.events + [ (holiday, s), ('no_holiday', e) ] %}
            {%- endif %}
          {%- endfor %}
  
          {%- for event, dt in ns.events | sort(attribute='1') %}
            {%- if dt.date() <= now().date() %}
              {%- set ns.found = event %}
            {%- endif %}
          {%- endfor %}
          {{ ns.found }}
        {%- else %}
          {{ override }}
        {%- endif %}
  sensor:
  - unique_id: indoor_holiday_lighting
    name: Holiday Lighting
    state: "{{ event }}"
