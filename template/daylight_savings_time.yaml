- trigger:
  - platform: time
    at: "00:00:00"
  - platform: homeassistant
    event: start
  - platform: event
    event_type: call_service
    event_data:
      domain: template
      service: reload
  sensor:
  - unique_id: dst_next
    name: "Daylight Savings: Next"
    device_class: timestamp
    state: >
      {%- macro hms(t) %}
      {%- set dststr = t.dst() | string if t.dst() is not none else "00:00:00" %}
      {%- set h, m, s = dststr.split(':') | map('int') %}
      {{- h * 60 * 60 + m * 60 + s }}   
      {%- endmacro %}
      
      {%- macro is_dst(t) %}
      {{- hms(t) | int != 0 }}
      {%- endmacro %}
      
      {%- macro finddst(t, kwarg, rng) %}
      {%- set ns = namespace(previous=is_dst(t), found=none) %}
      {%- for i in range(rng) %}
        {%- set ts = t + timedelta(**{kwarg:i}) %}
        {%- if ns.previous != is_dst(ts) and ns.found is none %}
          {%- set ns.found = i %}
        {%- endif %}
      {%- endfor %}
      {{- ns.found }}
      {%- endmacro %}
      
      {%- set t = now().replace(hour=0, minute=0, second=0, microsecond=0) %}
      {%- set d = finddst(t, 'days', 366) | int - 1 %}
      {%- set h = finddst(t + timedelta(days=d), 'hours', 25) | int - 1 %}
      {%- set m = finddst(t + timedelta(days=d, hours=h), 'minutes', 61) | int %}
      {{ (t + timedelta(days=d, hours=h, minutes=m)) }}

  - unique_id: dst_phrase
    name: "Daylight Savings: Phrase"
    state: >
      {%- macro hms(t) %}
      {%- set dststr = t.dst() | string if t.dst() is not none else "00:00:00" %}
      {%- set h, m, s = dststr.split(':') | map('int') %}
      {{- h * 60 * 60 + m * 60 + s }}   
      {%- endmacro %}

      {%- macro phrase(seconds, name, divisor, mod=None) %}
        {%- set value = ((seconds | abs // divisor) % (mod if mod else divisor)) | int %}
        {%- set end = 's' if value > 1 else '' %}
        {{- '{} {}{}'.format(value, name, end) if value > 0 else '' }}
      {%- endmacro %}

      {%- macro total(seconds) %}
      {%- set values = [ 
        phrase(seconds, 'hour', 60*60, 60*60*24),
        phrase(seconds, 'minute', 60, 60),
        ] | select('!=','') | list %}
      {{- values[:-1] | join(', ') ~ ' and ' ~ values[-1] if values | length > 1 else values | first | default}}
      {%- endmacro %}

      {%- macro finddelta(t, kwarg, rng) %}
      {%- set ns = namespace(previous=hms(t), found=none) %}
      {%- for i in range(rng) %}
        {%- set ts = t + timedelta(**{kwarg:i}) %}
        {%- if ns.previous != hms(ts) and ns.found is none %}
          {%- set before = hms(ts - timedelta(days=1)) | int %}
          {%- set after = hms(ts) | int %}
          {%- set ns.found =  after - before %}
        {%- endif %}
      {%- endfor %}
      {{ ns.found }}
      {%- endmacro %}
      
      {%- set t = now().replace(hour=0, minute=0, second=0, microsecond=0) %}
      {%- set delta = finddelta(t, 'days', 365) | int %}
      {% if delta > 0 %}
        lose {{ total(delta | abs) }}
      {% else %}
        gain {{ total(delta | abs) }}
      {% endif %}

- sensor:
  - unique_id: dst_days
    name: "Daylight Savings: Days Until"
    unit_of_measurement: days
    state: >
      {% set next = states('sensor.daylight_savings_next') | as_datetime %}
      {% set today = now().replace(hour=0, minute=0, second=0, microsecond=0) %}
      {{ (next - today).days if next is not none else 0 }}
    availability: >
      {{ states('sensor.daylight_savings_next') not in ['unknown', 'unavailable'] }}

