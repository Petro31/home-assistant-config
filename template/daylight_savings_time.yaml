# For anyone copying this code:  
# You have to update previous = 2 to whatever hour your timezone changes DST. 
# In my timezone, the time changes at 2am.  Therefore I used `previous = 2`. 
# If your timezone changes at 2:05 pm or 14:05, then you should use `previous = 15.  
# Also keep in mind that you need to update it in 2 places, `state` and `next`.

- sensor:
  - unique_id: dst
    name: Daylight Savings Times
    device_class: timestamp
    state: >
      {%- set ns = namespace(previous = 2, spring=none, fall=none) %}
      {%- set today = strptime(states('sensor.date'), '%Y-%m-%d').astimezone().replace(hour=ns.previous) %}
      {%- for i in range(365) %}
      {%- set day = (today + timedelta(days=i)).astimezone() %}
      {%- if ns.previous - day.hour == -1 %}
      {%- set ns.spring = today + timedelta(days=i) %}
      {%- elif ns.previous - day.hour == 1 %}
      {%- set ns.fall = today + timedelta(days=i) %}
      {%- endif %}
      {%- set ns.previous = day.hour %}
      {%- endfor %}
      {{ [ns.spring, ns.fall] | min }}
    attributes:
      template: dst
      next: >
        {%- set ns = namespace(previous = 2, spring=none, fall=none) %}
        {%- set today = strptime(states('sensor.date'), '%Y-%m-%d').astimezone().replace(hour=ns.previous) %}
        {%- for i in range(365) %}
        {%- set day = (today + timedelta(days=i)).astimezone() %}
        {%- if ns.previous - day.hour == -1 %}
        {%- set ns.spring = today + timedelta(days=i) %}
        {%- elif ns.previous - day.hour == 1 %}
        {%- set ns.fall = today + timedelta(days=i) %}
        {%- endif %}
        {%- set ns.previous = day.hour %}
        {%- endfor %}
        {%- set next = [ns.spring, ns.fall] | min %}
        {%- set phrase = 'lose an hour' if next == ns.spring else 'gain an hour' %}
        {"spring": "{{ns.spring}}", "fall": "{{ns.fall}}", "event": "{{next}}", "days_to_event":{{(next-today).days}}, "phrase": "{{phrase}}"}
