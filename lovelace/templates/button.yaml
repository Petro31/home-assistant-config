# lovelace_gen

{% set color = color|default('var(--paper-item-icon-active-color)') %}

type: custom:button-card
aspect_ratio: 1/1
entity: {{ entity }}
size: 60%
name: {{ name }}
show_state: true
show_name: true
show_label: false
styles:
  icon:
  - height: auto
  img_cell:
  - justify-content: start
  - align-items: start
  grid:
  - grid-template-areas: '"i info" "n n" "s s" "l l"'
  - grid-template-columns: 1fr 35%
  - grid-template-rows: 1fr 0.min-content min-content min-content
  - position: relative
  card:
    - border-radius: 15px
    - padding: 10px
  name:
  - justify-self: start
  - align-self: end
  - font-weight: bold
  - font-family: Helvetica 
  - font-size: 12px
  - text-align: start
  - background-image: linear-gradient(to right, white 0%, white 80%, rgba(0,0,0,0))
  - -webkit-background-clip: text
  - -webkit-text-fill-color: transparent
  - position: relative
  - display: inline-block
  - width: 100%
  - align-content: start
  - text-align: start
  - text-overflow: unset
  state:
  - justify-self: start
  - align-self: end
  - font-weight: bold
  - font-family: Helvetica 
  - font-size: 12px
  - text-align: start
  custom_fields:
    info:
    - align-self: start
custom_fields:
  info: >
      [[[
        function capitalizeFirstLetter(string) {
          return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
        }
        
        const length = 41;
        const width = 3;

        if (entity.state === 'on' && entity.attributes.brightness) {
          const radius = length / 2;
          const brightness = Math.round(entity.attributes.brightness / 2.54);
          const circumference = radius * 2 * Math.PI;
          return `
            <svg viewBox="0 0 50 50">
              <circle cx="25" cy="25" r="${radius}" fill="none" stroke="var(--paper-item-icon-color)" opacity="0.5" stroke-width="${width}" />
              <circle style="
                  transform: rotate(-90deg);
                  transform-origin: 50% 50%;
                  stroke-dasharray: ${circumference};
                  stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                "
                id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
              <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
              </text>
            </svg>
            `;
          }
        else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
          const text = capitalizeFirstLetter(entity.attributes.speed);
          const gap = 5;
          const edge = (50 - length) / 2;
          const y = 50 - edge;
          var items = entity.attributes.speed_list;
          if (items.indexOf('off') !== -1){
            items.splice(items.indexOf('off'), 1);
          }
          const current = items.indexOf(entity.attributes.speed)
          var i;
          var x1 = edge;
          var ret = `<svg  viewBox="0 0 50 50">`;
          var l = (length - gap * (items.length - 1)) / items.length;
          for (i = 0; i < items.length; i++) {
            var x2 = x1 + l;
            var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
            var opacity = (i <= current) ? "1.0" : "0.5";
            ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
            x1 = x2 + gap;
          }
          ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
          return ret;
        }
      ]]]
state:
- value: 'on'
  styles:
    card:
    - opacity: 1.0
    icon:
    - color: |
        [[[
          var [domain, object_id] = entity.entity_id.split('.');
          if (domain === "light")
            return 'var(--button-card-light-color)';
          return '{{ color }}';
        ]]]
    name:
      - color: white
    state:
      - color: gray
    lock:
      - color: white 
    label:
      - color: gray
- value: 'off'
  styles:
    card:
    - opacity: 0.5
    icon:
    - color: var(--paper-item-icon-color)
    name:
    - color: var(--primary-text-color)
    state:
    - color: var(--primary-text-color)
    label:
    - color: var(--primary-text-color)
    lock:
    - color: var(--paper-item-icon-color)
- value: "unavailable"
  styles:
    card:
    - opacity: 0.2
    icon:
    - color: var(--paper-item-icon-color)')
    name:
    - color: var(--primary-text-color)
    state:
    - color: hsl(0, 100%, 50%)
    label:
    - color: var(--primary-text-color)
    lock:
    - color: var(--paper-item-icon-color)
tap_action:
  action: toggle
  haptic: light
hold_action:
  action: more-info
  haptic: heavy