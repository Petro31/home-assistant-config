# lovelace_gen

{%- set ratio = ratio|default('1/1') %}
{%- set name_filter = name_filter | default('') %}


type: custom:button-card
aspect_ratio: {{ ratio }}
entity: {{ entity }}
icon: {{ icon }}
{%- if name_filter %}
name: |
  [[[
    if (entity === undefined)
      return 'Invalid Entity';

    var name = entity.attributes.friendly_name;
    var filter = "{{ name_filter }}";
    if (name.includes(filter))
      return name.replace(filter, '').trim();
    return name;
  ]]]
{%- else %}
name: {{ name }}
{%- endif %}
entity_picture: {{ image }}
color: var(--paper-item-icon-color)
show_name: true
show_label: true
show_entity_picture: true
show_last_changed: true
size: 70%
label: |
  [[[
    if (entity === undefined)
      return 'Invalid Entity';

    let date = new Date(entity.state);
    let now = new Date();
    var tdelta = Math.floor((now - date)/1000);

    function plural(descriptor, divisor){
      var ret = Math.floor(tdelta/divisor);
      return (ret == 1) ? [ret, descriptor] : [ret, `${descriptor}s`];
    }

    var values;
    if (tdelta < 60)
      values = plural('second', 1);
    else if (tdelta < 60 * 60)
      values = plural('minute', 60);
    else if (tdelta < 60 * 60 * 24)
      values = plural('hour', 60 * 60);
    else if (tdelta < 7 * 60 * 60 * 24)
      values = plural('day', 60 * 60 * 24);
    else
      values = plural('week', 7 * 60 * 60 * 24);

    return `${values[0]} ${values[1]} ago`;
  ]]]
tap_action:
  action: url
  url_path: "https://www.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6"
  haptic: light
styles:
  icon:
  - opacity: 0.3
  - width: 80%
  img_cell:
  - top: 0%
  - left: 30%
  - position: absolute
  - z-index: 1
  grid:
  - grid-template-areas: '"info" "n" "l"'
  - grid-template-columns: 100%
  - grid-template-rows: 1fr min-content min-content
  - position: relative
  card:
  - padding: 10px
  - border-radius: 15px
  name:
  - z-index: 2
  - justify-self: start
  - align-self: end
  - font-weight: bold
  - font-family: Helvetica 
  - font-size: 12px
  - text-align: start
  - background-image: linear-gradient(to right, white 0%, white 80%, rgba(0,0,0,0))
  - -webkit-background-clip: text
  - -webkit-text-fill-color: transparent
  - position: relative
  - display: inline-block
  - width: 100%
  - align-content: start
  - text-align: start
  - text-overflow: unset
  label:
  - z-index: 2
  - justify-self: start
  - align-self: end
  - font-weight: bold
  - font-family: Helvetica 
  - font-size: 12px
  - text-align: start
  - background-image: linear-gradient(to right, var(--paper-item-icon-color) 0%, var(--paper-item-icon-color) 80%, rgba(0,0,0,0))
  - -webkit-background-clip: text
  - -webkit-text-fill-color: transparent
  - position: relative
  - display: inline-block
  - width: 100%
  - align-content: start
  - text-align: start
  - text-overflow: unset
  custom_fields:
    info:
    - z-index: 2
    - justify-self: start
    - align-self: start
    - font-family: Helvetica 
    - font-size: 12px
    - text-align: start
    - background-image: linear-gradient(to right, var(--paper-item-icon-color) 0%, var(--paper-item-icon-color) 80%, rgba(0,0,0,0))
    - -webkit-background-clip: text
    - -webkit-text-fill-color: transparent
    - position: relative
    - display: inline-block
    - width: 100%
    - align-content: start
    - text-align: start
    - text-overflow: unset
custom_fields:
  info: |
    [[[
      var empty = '&nbsp;';
      if (entity === undefined)
        return empty;

      function numberWithCommas(x) {
         return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      }

      function getEntityIcon(item){
        var value = numberWithCommas(item.text);
        return `<ha-icon
          icon="${item.icon}"
          style="width: 1.4em; height: 1.4em; color: ${item.color};">
          </ha-icon><span style="font-weight: bold;"> ${value}</span>`;
        }
      
      var items = [{
        text: entity.attributes.confirmed,
        icon: 'mdi:emoticon-neutral-outline',
        color: 'var(--paper-item-icon-active-color)'
      }, {
        text: entity.attributes.recovered,
        icon: 'mdi:emoticon-excited-outline',
        color: 'rgba(94, 228, 101)'
      }, {
        text: entity.attributes.deaths,
        icon: 'mdi:emoticon-dead-outline',
        color: 'rgba(228, 94, 101)'
      }]

      let ret = [];
      items.forEach(item => {
          ret.push(getEntityIcon(item));
      });
      return ret.join("<br>");
    ]]]