# lovelace_gen

{%- set color = color | default('var(--paper-item-icon-active-color)') %}
{%- set aspect_ratio = aspect_ratio | default('1/1') %}
{%- set entities = entities | default([]) %}
{%- set max_display = max_display | default(-1) %}
{%- set triggers_update = triggers_update | default('') %}
{%- set imgratio = 'transparent_' ~ 'to'.join(aspect_ratio.split('/')) ~ '.png' %}

{%- set found = namespace(sensor='', entities=[]) %}
{%- for entity in entities %}
{%- if entity.startswith('device_tracker.') or entity.startswith('binary_sensor.') %}
{%- set found.sensor = entity %}
{%- else %}
{%- set found.entities = found.entities + [entity] %}
{%- endif %}
{%- endfor %}
{%- set entities = found.entities %}
{%- set status = found.sensor %}

type: custom:button-card
aspect_ratio: {{ aspect_ratio }}
entity: {{ entity }}
icon: {{ icon }}
{%- if name is defined and name.count('.') == 1 %}
name: |
  [[[
    var entity_id = '{{ name }}';
    var stateobj = states[entity_id];
    return (stateobj && stateobj.state) ? stateobj.state : entity_id;
  ]]]
{%- else %}
name: {{ name }}
{%- endif %}
entity_picture: {{ image }}
color: var(--paper-item-icon-color)
show_name: true
show_label: true
{%- if image %}
show_entity_picture: true
{%- else %}
show_icon: true
{%- endif %}
size: 70%
{%- if triggers_update and triggers_update == 'all' %}
triggers_update: all
{%- else %}
triggers_update:
  {%- set triggers = entities %}
  {%- if triggers_update is iterable %}
    {%- set triggers = triggers_update %}
  {%- endif %}
  {%- for entity in triggers %}
- {{ entity }}
  {%- endfor %}
{%- endif %}
label: |
  [[[
    var sensor = "{{ status }}";
    var entity = states[sensor];
    if (entity && entity.state)
      return (['home','on'].includes(entity.state)) ? 'Online' : 'Offline';

    var items = {{ entities }};
    var max_display = {{ max_display }};
    if (max_display > 0)
      items = items.slice(0, max_display);
    else {
      if (String(navigator.userAgent).includes('iPhone'))
        items = items.slice(0, 4)
      else
        items = items.slice(0, 6)
    }
    
    var dates = [];
    items.forEach(item => {
      if (states[item] && states[item].last_updated)
        dates.push(new Date(states[item].last_updated));
    });
    var date = new Date(Math.max.apply(null, dates));
      
    let now = new Date();
    var tdelta = Math.floor((now - date)/1000);

    function plural(descriptor, divisor){
      var ret = Math.floor(tdelta/divisor);
      return (ret == 1) ? [ret, descriptor] : [ret, `${descriptor}s`];
    }

    var values;
    if (tdelta < 60)
      values = plural('second', 1);
    else if (tdelta < 60 * 60)
      values = plural('minute', 60);
    else if (tdelta < 60 * 60 * 24)
      values = plural('hour', 60 * 60);
    else if (tdelta < 7 * 60 * 60 * 24)
      values = plural('day', 60 * 60 * 24);
    else
      values = plural('week', 7 * 60 * 60 * 24);

    return `${values[0]} ${values[1]} ago`;
  ]]]
tap_action:
  action: navigate
  navigation_path: /lovelace/{{ path | default("home") }}
  haptic: light
styles:
  icon:
  - opacity: 0.3
  - width: 100%
  img_cell:
  - top: 0%
  - left: 30%
  - position: absolute
  - z-index: 1
  grid:
  - grid-template-areas: '"info" "n" "l"'
  - grid-template-columns: 100%
  - grid-template-rows: 1fr min-content min-content
  - position: relative
  card:
  - padding: 10px
  - border-radius: 15px
  name:
  - z-index: 2
  - justify-self: start
  - align-self: end
  - font-weight: bold
  - font-family: Helvetica 
  - font-size: 12px
  - text-align: start
  - background-image: linear-gradient(to right, white 0%, white 80%, rgba(0,0,0,0))
  - -webkit-background-clip: text
  - -webkit-text-fill-color: transparent
  - position: relative
  - display: inline-block
  - width: 100%
  - align-content: start
  - text-align: start
  - text-overflow: unset
  label:
  - z-index: 2
  - justify-self: start
  - align-self: end
  - font-weight: bold
  - font-family: Helvetica 
  - font-size: 12px
  - text-align: start
  - background-image: linear-gradient(to right, var(--paper-item-icon-color) 0%, var(--paper-item-icon-color) 80%, rgba(0,0,0,0))
  - -webkit-background-clip: text
  - -webkit-text-fill-color: transparent
  - position: relative
  - display: inline-block
  - width: 100%
  - align-content: start
  - text-align: start
  - text-overflow: unset
  custom_fields:
    info:
    - z-index: 2
    - justify-self: start
    - align-self: start
    - font-family: Helvetica 
    - font-size: 12px
    - text-align: start
    - background-image: linear-gradient(to right, var(--paper-item-icon-color) 0%, var(--paper-item-icon-color) 80%, rgba(0,0,0,0))
    - -webkit-background-clip: text
    - -webkit-text-fill-color: transparent
    - position: relative
    - display: inline-block
    - width: 100%
    - align-content: start
    - text-align: start
    - text-overflow: unset
custom_fields:
  info: |
    [[[
      var items = {{ entities }};
      var max_display = {{ max_display }};
      if (max_display > 0)
        items = items.slice(0, max_display);
      else {
        var uAgent = String(navigator.userAgent);
        if (uAgent.includes('iPhone') || uAgent.includes('iOS'))
          items = items.slice(0, 4)
        else
          items = items.slice(0, 6)
      }

      function getEntityIcon(state, units, icon, color){
        units = (units !== null) ? `<span style="font-size: 75%;">${units}</span>` : '';
        icon = (icon) ? icon : 'mdi:eye';
        return `<ha-icon
          icon="${icon}"
          style="width: 1.4em; height: 1.4em; color: var(--paper-item-icon-active-color);">
          </ha-icon><span style="font-weight: bold;"> ${state}</span>${units}`;
        }
      
      let ret = [];
      items.forEach(item => {
        var entity = states[item];
        if (entity && entity.state){
          var entity_id = entity.entity_id;
          var statestr = entity.state.trim();
          var units = (entity.attributes.unit_of_measurement) ? entity.attributes.unit_of_measurement : null;
          var date = (statestr && entity.attributes.device_class === 'timestamp') ? new Date(statestr) : null;
          var icon = (entity.attributes.icon) ? entity.attributes.icon : '';
          var value;

          if (statestr && date === null) {
            if (statestr.split('.').length - 1 <= 1){
              var test = parseFloat(parseFloat(statestr).toFixed(2));
              value = (isNaN(test)) ? null : test;

              // test if units are in the state because some sensors are stupid.  Looking
              //   at you synology.

              const expr = /[^-.0-9]+/;
              var has_units = expr.test(statestr);

              // console.log(`${entity_id}: "${statestr}"`);
              if (value && has_units)
                units = statestr.replace(/[.0-9]+/, '');

              if (units !== null && (units.includes('hr') || units.includes('min'))) {
                value = statestr;
                units = null;
              }
            }
          }

          if (date){
            let now = new Date();
            var tdelta = Math.floor((now - date)/1000);

            // console.log(`${entity_id}: ${tdelta}`);

            function plural(descriptor, divisor){
              var ret = Math.floor(tdelta/divisor);
              return (ret == 1) ? [ret, descriptor] : [ret, `${descriptor}s`];
            }

            var values;
            if (tdelta < 60)
              values = plural('second', 1);
            else if (tdelta < 60 * 60)
              values = plural('minute', 60);
            else if (tdelta < 60 * 60 * 24)
              values = plural('hour', 60 * 60);
            else if (tdelta < 7 * 60 * 60 * 24)
              values = plural('day', 60 * 60 * 24);
            else
              values = plural('week', 7 * 60 * 60 * 24);
            statestr = values[0];
            units = values[1];
          }
          if (value && units){
            statestr = value;
            if (units.includes('Â°') && !icon)
              icon = 'mdi:thermometer'
          }
          
          if(entity_id.includes('device_tracker.') || ['on', 'off'].includes(statestr)) {
            const on = ['home','on'];
            icon = (on.includes(statestr)) ? 'mdi:check-network' : 'mdi:close-network';
            statestr = (on.includes(statestr)) ? 'Online' : 'Offline';
            units = '';
          }

          ret.push(getEntityIcon(statestr, units, icon))
        }
      });
      return ret.join("<br>")

    ]]]