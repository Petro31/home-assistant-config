# lovelace_gen

      # var empty = '&nbsp;'
      # if (entity === undefined || entity.attributes.entity_id === undefined)
      #   return empty;

      # var entities = entity.attributes.entity_id;
      # var domains = ['light', 'switch']

      # var i;
      # var filtered = [];
      # var entity_id;

      # for (entity_id of entities){
      #   var this_state = states[entity_id];
      #   if (this_state !== undefined && !filtered.includes(entity_id) && this_state.state === 'on')
      #     if (domains.include(entity_id.split('.')[0]))
      #       filtered.push(entity_id);
      # }
      # return (filtered.length > 0) ? 'On' : 'Off';

# {% set color = color|default('var(--paper-item-icon-active-color)') %}

# type: custom:button-card
# show_state: false
# show_label: true
# label: |
#   [[[
#     var empty = '&nbsp;'
#     var last_opened = "{{ last_opened }}";
#     var ts_entity = states[last_opened];
#     if (ts_entity === undefined)
#       return empty;

#     if (ts_entity.attributes.who !== undefined)
#       return ts_entity.attributes.who;
#     return empty;
#   ]]]
# aspect_ratio: 5/1
# entity: {{ entity }}
# icon: {{ icon }}
# name: {{ name }}
# color: auto
# size: 100%
# variables:
#   is_on: |
#     [[[
#       if (entity === undefined || entity.attributes.entity_id === undefined)
#         return false;

#       var entities = entity.attributes.entity_id;
#       var domains = ['light', 'switch']

#       var i;
#       var filtered = [];
#       var entity_id;

#       for (entity_id of entities){
#         var this_state = states[entity_id];
#         if (this_state !== undefined && !filtered.includes(entity_id) && this_state.state === 'on')
#           if (domains.include(entity_id.split('.')[0]))
#             filtered.push(entity_id);
#       }
#       return filtered.join(',');
#     ]]]
# custom_fields:
#   fake_state: |
#     [[[
#       return (variables.is_on.split(',').length > 0) ? 'On' : 'Off';
#     ]]]
# styles:
#   card:
#   - border-radius: 15px
#   grid:
#   - grid-template-areas: '"i n s" "i l s"'
#   - grid-template-columns: 3fr 8fr 6fr
#   - grid-template-rows: 1fr 1fr
#   name:
#   - justify-self: start
#   - align-self: end
#   - padding-left: 10px
#   - font-weight: bold
#   - font-family: Helvetica 
#   - font-size: 16px
#   label:
#   - align-self: start
#   - padding-left: 10px
#   - font-size: 12px
#   - justify-self: start
#   custom_fields:
#     fake_state:
#     - position: absolute
#     - top: 50%
#     - right: 5%
#     - transform: translateY(-50%)
#     - font-size: 13px
#     - justify-self: start
#     - text-align: start
# state:
# - operator: template
#   value: |
#     [[[ return (variables.is_on.split(',').length > 0); ]]]
#   styles:
#     icon:
#       - color: {{ color }}
#     name:
#       - color: white
#     state:
#       - color: gray
#     lock:
#       - color: white 
#     label:
#       - color: gray
# - operator: template
#   value: |
#     [[[ return (variables.is_on.split(',').length == 0); ]]]
#   styles:
#     card:
#     - opacity: 0.5
#     icon:
#     - color: var(--paper-item-icon-color)
#     name:
#     - color: var(--primary-text-color)
#     state:
#     - color: var(--primary-text-color)
#     label:
#     - color: var(--primary-text-color)
#     lock:
#     - color: var(--paper-item-icon-color)
# - value: "unavailable"
#   styles:
#     card:
#     - opacity: 0.2
#     icon:
#     - color: var(--paper-item-icon-color)')
#     name:
#     - color: var(--primary-text-color)
#     state:
#     - color: hsl(0, 100%, 50%)
#     label:
#     - color: var(--primary-text-color)
#     lock:
#     - color: var(--paper-item-icon-color)
# tap_action:
#   action: call-service
#   service: homeassistant.toggle
#   service_data:
#     entity_id: |
#       [[[
#         return variables.is_on;
#       ]]]
#   haptic: light

{% set color = color|default('var(--paper-item-icon-active-color)') %}

type: custom:button-card
show_state: true
show_label: true
aspect_ratio: 5/1
entity: {{ entity }}
icon: {{ icon }}
label: |    
  [[[
    var empty = '&nbsp;'
    if (!entity)
      return empty;

    function getEntityIcon(count, icon, color){
      if (count > 0) {
        return `<ha-icon
          icon="${icon}"
          style="width: 10%; height: 10%; color: ${color};">
          </ha-icon><span> ${count}</span>`
      }
      return empty;
    }

    function expand(entities, accepted, rejected, state, domains){
      var i;
      for (i = 0; i < entities.length; i++){
        var [domain, object_id] = entities[i].split('.');
        var state_obj = states[entities[i]];
        if (state_obj === undefined)
          rejected.push(entities[i]);
        else if (domain === 'group')
          expand(state_obj.attributes.entity_id, accepted, rejected, state, domains)
        else if (domains.includes(domain) && state.includes(state_obj.state))
          if (!accepted.includes(entities[i]))
            accepted.push(entities[i])
        else
          if (!rejected.includes(entities[i]))
            rejected.push(entities[i])
      }
    }
    var find = [{
      state: ['on'],
      domains: ['light', 'switch'],
      icon: 'mdi:lightbulb-on',
      color: '{{ color }}'
    }, {
      state: ['on'],
      domains: ['fan'],
      icon: 'mdi:fan',
      color: '{{ color }}'
    }]

    var [domain, object_id] = entity.entity_id.split('.');
    let ret = [];
    if (domain === 'group'){
      var i;
      for (i = 0; i < find.length; i++){
        let found = [];
        let filtered = [];
        var state = find[i].state;
        var domains = find[i].domains;
        var icon = find[i].icon;
        var color = find[i].color;
        expand(entity.attributes.entity_id, found, filtered, state, domains);
        var add = getEntityIcon(found.length, icon, color);
        if (add !== empty)
          ret.push(add);
      }
      return ret.join(" ");
    }
    return empty;
  ]]]
color: auto
size: 100%
styles:
  card:
  - border-radius: 15px
  grid:
  - grid-template-areas: '"i n s" "i l s"'
  - grid-template-columns: 3fr 8fr 6fr
  - grid-template-rows: 1fr 1fr
  name:
  - justify-self: start
  - align-self: end
  - padding-left: 10px
  - font-weight: bold
  - font-family: Helvetica 
  - font-size: 16px
  label:
  - align-self: start
  - padding-left: 10px
  - font-size: 12px
  - justify-self: start
  - text-align: start
  state:
  - font-size: 13px
  - padding-right: 25px
  - justify-self: end
  - font-weight: bold
state:
- value: 'on'
  styles:
    icon:
      - color: {{ color }}
    name:
      - color: white
    state:
      - color: gray
    lock:
      - color: white 
    label:
      - color: gray
- value: 'off'
  styles:
    card:
    - opacity: 0.5
    icon:
    - color: var(--paper-item-icon-color)
    name:
    - color: var(--primary-text-color)
    state:
    - color: var(--primary-text-color)
    label:
    - color: var(--primary-text-color)
    lock:
    - color: var(--paper-item-icon-color)
- value: "unavailable"
  styles:
    card:
    - opacity: 0.2
    icon:
    - color: var(--paper-item-icon-color)')
    name:
    - color: var(--primary-text-color)
    state:
    - color: hsl(0, 100%, 50%)
    label:
    - color: var(--primary-text-color)
    lock:
    - color: var(--paper-item-icon-color)
tap_action:
  action: toggle
  haptic: light